GENERAL:
- fix TODOs
- cleanup+refactor nasty code
- implement safeguards on everything

COMPILER:
- improve end-of-function return generation (return zero value if no explicit return is used)
- implement ternary operator
- implement function/struct forward declarations
- implement array initializers
- implement compound assignment operators
- implement function pointers
- implement unsigned int comparison operators?
- implement global variable initialization
- implement string reuse (return a pointer to an existing string if a duplicate string literal is detected)

VM:
- optimize text rendering
- revise memory map
- implement debug opcodes
- implement vertex-lighting mode and api
- implement memory allocator and api for vm heap
- implement memory card system and api
- implement cartridge data loading api
- implement sound/music api
- implement physics api
- implement actor+model+animation api
- implement cycle limit (how to deal with incomplete calls?)
- implement triangle rendering limit?

HOST:
- rewrite main.nelua
- implement debugger
- implement boot animation
- implement model loading
- implement ui (terminal?, editors?. etc.)
- implement cartridge format and saving/loading
