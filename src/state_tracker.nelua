require("statemachine")

-- TODO: add basic ui to load audio samples

local PIANO_KEYS_COUNT <comptime> = SOUNDCHIP_OCTAVE_SIZE * 2

local Editor = @enum {
    SONG = 0,
    PATTERN,
    INSTRUMENT,
    COUNT
}

local TrackerData = @record {
    clipboard: [SOUNDCHIP_SONG_SIZE]uint8,
    clipboard_len: uinteger,
    clipboard_type: uinteger, -- type of data currently in clipboard
    selection_start: uinteger,
    selection_len: uinteger,
    current_editor: integer,
    octave: uint8,
    song_id: uint8,
    song_x: integer,
    song_y: integer,
    instrument_id: uint8,
    instrument_x: integer,
    instrument_y: integer,
    track: integer,
    pattern_x: integer,
    pattern_y: integer,
    prev_volume: uint8,
    prev_instrument: uint8,
    byte_val: uint8
}

local note_names: [SOUNDCHIP_OCTAVE_SIZE]string = {
    "C-",
    "C#",
    "D-",
    "D#",
    "E-",
    "F-",
    "F#",
    "G-",
    "G#",
    "A-",
    "A#",
    "B-"
}

local piano_keys: [PIANO_KEYS_COUNT]cint = {
    -- base octave
    rl.keyboardKey.Z, -- C
    rl.keyboardKey.S, -- C#
    rl.keyboardKey.X, -- D
    rl.keyboardKey.D, -- D#
    rl.keyboardKey.C, -- E
    rl.keyboardKey.V, -- F
    rl.keyboardKey.G, -- F#
    rl.keyboardKey.B, -- G
    rl.keyboardKey.H, -- G#
    rl.keyboardKey.N, -- A
    rl.keyboardKey.J, -- A#
    rl.keyboardKey.M, -- B

    -- octave + 1
    rl.keyboardKey.Q,     -- C
    rl.keyboardKey.TWO,   -- C#
    rl.keyboardKey.W,     -- D
    rl.keyboardKey.THREE, -- D#
    rl.keyboardKey.E,     -- E
    rl.keyboardKey.R,     -- F
    rl.keyboardKey.FIVE,  -- F#
    rl.keyboardKey.T,     -- G
    rl.keyboardKey.SIX,   -- G#
    rl.keyboardKey.Y,     -- A
    rl.keyboardKey.SEVEN, -- A#
    rl.keyboardKey.U      -- B
}

local data: TrackerData

local function drawLevels(sm: *StateMachine, vm: *EVM): void
    local l: BKFrame = 0
    local r: BKFrame = 0

    for i = 0, < SOUNDCHIP_FRAMES_PER_UPDATE do
        local idx: uinteger = i * 2
        local ltemp: BKFrame = math.abs(vm.soundchip.aobmem[idx])
        local rtemp: BKFrame = math.abs(vm.soundchip.aobmem[idx + 1])

        if ltemp > l then l = ltemp end
        if rtemp > r then r = rtemp end
    end

    --print("left", l, "right", r)
end

local function drawSong(sm: *StateMachine, vm: *EVM): void
    vm.gpu:print2D(18, 9, GPU_WHITE, "SEQBANK")
    vm.gpu:printHexNibble2D(66, 9, GPU_WHITE, vm.soundchip.current_seqbank - SoundchipBank.SEQBANK0)

    local selcol: uint32 = (data.current_editor == Editor.SONG) and core.cursor_color or GPU_GRAY
    vm.gpu:drawRect2D(4, 7, 112, 1, selcol)
    vm.gpu:drawRect2D(4, 8, 1, 83, selcol)
    vm.gpu:drawRect2D(115, 8, 1, 83, selcol)
    vm.gpu:drawRect2D(4, 91, 112, 1, selcol)

    local start_row: int32 = util.midI(0, data.song_y - 3, 248)

    for x = 0, < SOUNDCHIP_TRACK_COUNT do
        for y = 0, < 8 do
            local startx: int32 = 18 + x * 12
            local starty: int32 = 18 + y * 9
            local row: int32
            local byte_val: uint8 = vm.soundchip.song_data[8 * (start_row + y) + x]

            vm.gpu:printHexByte2D(6, starty, GPU_LGRAY, start_row + y)

            if (data.song_x /// 2) == x and data.song_y == (start_row + y) then
                vm.gpu:drawRect2D(startx + ((data.song_x & 1) * 6), starty, 6, 9, selcol)
            end

            local col: uint32 = GPU_PALETTE[x]

            if byte_val == SOUNDCHIP_EMPTY_VALUE then
                vm.gpu:print2D(startx, starty, col, "..")
            else
                vm.gpu:printHexByte2D(startx, starty, col, byte_val)
            end
        end
    end
end

local function getNoteText(note: uint8): string
    if note == SOUNDCHIP_EMPTY_VALUE then
        return "..."
    elseif note == SOUNDCHIP_NOTE_MUTE then
        return "OFF"
    elseif note == SOUNDCHIP_NOTE_RELEASE then
        return "REL"
    else
        local base_note: uint8 = note %%% SOUNDCHIP_OCTAVE_SIZE
        local octave: uint8 = note /// SOUNDCHIP_OCTAVE_SIZE
        return string.format("%s%1X", note_names[base_note], octave)
    end
end

local function drawPatterns(sm: *StateMachine, vm: *EVM): void
    local start_track: int32 = util.midI(0, data.track - 1, 4)
    local start_pattern_y: int32 = 108

    for i = 0, < 4 do
        local start_pattern_x: int32 = 6 + (i * 13 * 6)

        local selcol: uint32 = (data.current_editor == Editor.PATTERN and data.track == start_track + i) and core.cursor_color or GPU_GRAY
        vm.gpu:drawRect2D(start_pattern_x - 2, start_pattern_y - 11, 76, 1, selcol)
        vm.gpu:drawRect2D(start_pattern_x - 2, start_pattern_y - 10, 1, 155, selcol)
        vm.gpu:drawRect2D(start_pattern_x + 73, start_pattern_y - 10, 1, 155, selcol)
        vm.gpu:drawRect2D(start_pattern_x - 2, start_pattern_y + 145, 76, 1, selcol)

        local col: uint32 = GPU_PALETTE[start_track + i]
        vm.gpu:print2D(start_pattern_x + 12, start_pattern_y - 9, col, "TRACK")
        vm.gpu:printHexNibble2D(start_pattern_x + 48, start_pattern_y - 9, col, start_track + i)

        local pattern_id: uint8 = vm.soundchip.song_data[8 * data.song_y + (start_track + i)]

        if pattern_id == SOUNDCHIP_EMPTY_VALUE then
            vm.gpu:print2D(start_pattern_x + 60, start_pattern_y - 9, GPU_GRAY, "..")
        else
            vm.gpu:printHexByte2D(start_pattern_x + 60, start_pattern_y - 9, GPU_LGRAY, pattern_id)
        end

        if pattern_id ~= SOUNDCHIP_EMPTY_VALUE then
            local start_row: int32 = util.midI(0, data.pattern_y - 7, 64-16)
            for j = 0, < 16 do
                local y: int32 = start_pattern_y + j * 9

                if (data.track == start_track + i) and (data.pattern_y == start_row + j) then
                    -- draw cursor
                    local cx: int32
                    local cw: int32 = 6

                    if data.pattern_x == 0 then
                        cx = 0
                        cw = 18
                    else
                        cx = 18 + ((data.pattern_x - 1) * 6)
                    end

                    vm.gpu:drawRect2D(start_pattern_x + 12 + cx, y, cw, 9, selcol)
                end

                local row: *[0]uint8 = vm.soundchip:getPatternRow(pattern_id, start_row + j)
                local note: uint8 = row[0]
                local vol: uint8 = row[1]
                local instr: uint8 = row[2]
                local fx: uint8 = row[3]
                local arg: uint8 = row[4]

                vm.gpu:printHexByte2D(start_pattern_x, y, ((start_row + j) & 0b11 == 0) and GPU_LGRAY or GPU_GRAY, start_row + j)
                vm.gpu:print2D(start_pattern_x + 12, y, GPU_WHITE, getNoteText(note))
                if vol == SOUNDCHIP_EMPTY_VALUE then
                    vm.gpu:print2D(start_pattern_x + 30, y, GPU_GREEN, "..")
                else
                    vm.gpu:printHexByte2D(start_pattern_x + 30, y, GPU_GREEN, vol)
                end
                if instr == SOUNDCHIP_EMPTY_VALUE then
                    vm.gpu:print2D(start_pattern_x + 42, y, GPU_LBLUE, "..")
                else
                    vm.gpu:printHexByte2D(start_pattern_x + 42, y, GPU_LBLUE, instr)
                end
                vm.gpu:print2D(start_pattern_x + 54, y, GPU_PURPULE, ".")
                if fx == SOUNDCHIP_EMPTY_VALUE then
                    vm.gpu:print2D(start_pattern_x + 60, y, GPU_PINK, "..")
                else
                    vm.gpu:printHexByte2D(start_pattern_x + 60, y, GPU_PINK, arg)
                end
            end
        else
            vm.gpu:print2D(start_pattern_x + 18, start_pattern_y + 7 * 9, GPU_LGRAY, "EMPTY")
        end
    end
end

local function drawInstrument(sm: *StateMachine, vm: *EVM): void
    local selcol: uint32 = (data.current_editor == Editor.INSTRUMENT) and core.cursor_color or GPU_GRAY
    vm.gpu:drawRect2D(4, 259, 154, 1, selcol)
    vm.gpu:drawRect2D(4, 260, 1, 65, selcol)
    vm.gpu:drawRect2D(157, 260, 1, 65, selcol)
    vm.gpu:drawRect2D(4, 325, 154, 1, selcol)

    vm.gpu:print2D(6, 261, GPU_WHITE, "INSTRUMENT")

    if data.instrument_id == SOUNDCHIP_EMPTY_VALUE then
        vm.gpu:print2D(71, 261, GPU_GRAY, "..")
    else
        vm.gpu:printHexByte2D(71, 261, GPU_LGRAY, data.instrument_id)

        local label_x: int32 = 6
        local value_x: int32 = 78
        local current_y: int32 = 270
        local idata: *[0]uint8 = vm.soundchip:getInstrument(data.instrument_id)
        local flags: uint8 = idata[0]
        local sample_start: uint32 = ((@uint32)(idata[1]) << 16) | ((@uint32)(idata[2]) << 8) | (@uint32)(idata[3])
        local sample_end: uint32 = ((@uint32)(idata[4]) << 16) | ((@uint32)(idata[5]) << 8) | (@uint32)(idata[6])
        local sustain_start: uint32 = ((@uint32)(idata[7]) << 16) | ((@uint32)(idata[8]) << 8) | (@uint32)(idata[9])
        local sustain_end: uint32 = ((@uint32)(idata[10]) << 16) | ((@uint32)(idata[11]) << 8) | (@uint32)(idata[12])
        local attack: uint8 = idata[13]
        local decay: uint8 = idata[14]
        local sustain: uint8 = idata[15]
        local release: uint8 = idata[16]

        -- draw name background rect
        vm.gpu:drawRect2D(value_x, current_y, 48, 9, GPU_DGRAY)

        -- draw cursor
        switch data.instrument_y do
            case 0 then -- name
                vm.gpu:drawRect2D(value_x + data.instrument_x * 6, 270, 6, 9, selcol)
            case 1 then -- sample mode
                vm.gpu:drawRect2D(value_x, 279, 36, 9, selcol)
            case 2 then -- sample start+end/wavmap id
                vm.gpu:drawRect2D(value_x + ((data.instrument_x /// 6) * 42) + ((data.instrument_x % 6) * 6), 288, 6, 9, selcol)
            case 3 then -- loop mode
                vm.gpu:drawRect2D(value_x, 297, 48, 9, selcol)
            case 4 then -- loop range
                vm.gpu:drawRect2D(value_x + ((data.instrument_x /// 6) * 42) + ((data.instrument_x % 6) * 6), 306, 6, 9, selcol)
            case 5 then -- adsr
                local y: int32 = 306
                if flags & InstrumentFlag.LOOP_MASK == InstrumentFlag.LOOP_RANGE then
                    y = 315
                end
                vm.gpu:drawRect2D(value_x + ((data.instrument_x /// 2) * 18) + ((data.instrument_x & 1) * 6), y, 6, 9, selcol)
        end

        vm.gpu:print2D(label_x, current_y, GPU_GRAY, "NAME")
        local x: int32 = value_x
        for i = 0, < 8 do
            vm.gpu:drawChar2D(idata[17 + i], &x, current_y, {0xFF, 0xFF, 0xFF, 0xFF})
        end
        current_y = current_y + 9

        vm.gpu:print2D(label_x, current_y, GPU_GRAY, "SAMPLE MODE")
        if flags & InstrumentFlag.MANUAL ~= 0 then
            vm.gpu:print2D(value_x, current_y, GPU_WHITE, "MANUAL")
            current_y = current_y + 9

            vm.gpu:print2D(label_x, current_y, GPU_GRAY, "START/END")
            vm.gpu:printHexByte2D(value_x, current_y, GPU_WHITE, (sample_start >> 16) & 0xFF)
            vm.gpu:printHexByte2D(value_x + 12, current_y, GPU_WHITE, (sample_start >> 8) & 0xFF)
            vm.gpu:printHexByte2D(value_x + 24, current_y, GPU_WHITE, sample_start & 0xFF)

            vm.gpu:printHexByte2D(value_x + 42, current_y, GPU_WHITE, (sample_end >> 16) & 0xFF)
            vm.gpu:printHexByte2D(value_x + 54, current_y, GPU_WHITE, (sample_end >> 8) & 0xFF)
            vm.gpu:printHexByte2D(value_x + 66, current_y, GPU_WHITE, sample_end & 0xFF)
        else
            vm.gpu:print2D(value_x, current_y, GPU_WHITE, "WAVMAP")
            current_y = current_y + 9

            vm.gpu:print2D(label_x, current_y, GPU_GRAY, "MAP ID")
            vm.gpu:printHexNibble2D(value_x, current_y, GPU_WHITE, (sample_start >> 8) & 0xF)
            vm.gpu:printHexByte2D(value_x + 6, current_y, GPU_WHITE, sample_start & 0xFF)
        end
        current_y = current_y + 9
    
        vm.gpu:print2D(label_x, current_y, GPU_GRAY, "LOOP MODE")
        switch flags & InstrumentFlag.LOOP_MASK do
            case InstrumentFlag.LOOP_OFF then
                vm.gpu:print2D(value_x, current_y, GPU_WHITE, "OFF")
            case InstrumentFlag.LOOP_FORWARD then
                vm.gpu:print2D(value_x, current_y, GPU_WHITE, "FORWARD")
            case InstrumentFlag.LOOP_PINGPONG then
                vm.gpu:print2D(value_x, current_y, GPU_WHITE, "PINGPONG")
            case InstrumentFlag.LOOP_RANGE then
                vm.gpu:print2D(value_x, current_y, GPU_WHITE, "RANGE")
                current_y = current_y + 9

                local range_color: uint32 = (flags & InstrumentFlag.LOOP_MASK == InstrumentFlag.LOOP_RANGE) and GPU_WHITE or GPU_GRAY
                vm.gpu:print2D(label_x, current_y, GPU_GRAY, "LOOP RANGE")
                vm.gpu:printHexByte2D(value_x, current_y, range_color, (sustain_start >> 16) & 0xFF)
                vm.gpu:printHexByte2D(value_x + 12, current_y, range_color, (sustain_start >> 8) & 0xFF)
                vm.gpu:printHexByte2D(value_x + 24, current_y, range_color, sustain_start & 0xFF)
                
                vm.gpu:printHexByte2D(value_x + 42, current_y, range_color, (sustain_end >> 16) & 0xFF)
                vm.gpu:printHexByte2D(value_x + 54, current_y, range_color, (sustain_end >> 8) & 0xFF)
                vm.gpu:printHexByte2D(value_x + 66, current_y, range_color, sustain_end & 0xFF)
        end
        current_y = current_y + 9
    
        vm.gpu:print2D(label_x, current_y, GPU_GRAY, "ADSR")
        vm.gpu:printHexByte2D(value_x, current_y, GPU_WHITE, attack)
        vm.gpu:printHexByte2D(value_x + 18, current_y, GPU_WHITE, decay)
        vm.gpu:printHexByte2D(value_x + 36, current_y, GPU_WHITE, sustain)
        vm.gpu:printHexByte2D(value_x + 54, current_y, GPU_WHITE, release)
    end
end

local function doNoteInput(vm: *EVM): boolean
    local row: *[0]uint8 = vm.soundchip:getPatternRow(vm.soundchip.song_data[8 * data.song_y + data.track], data.pattern_y)

    if rl.isKeyPressed(rl.keyboardKey.BACKSPACE) then
        row[0] = SOUNDCHIP_EMPTY_VALUE
        row[1] = SOUNDCHIP_EMPTY_VALUE
        row[2] = SOUNDCHIP_EMPTY_VALUE
        return true
    elseif rl.isKeyPressed(rl.keyboardKey.COMMA) then
        row[0] = SOUNDCHIP_NOTE_RELEASE
        row[1] = SOUNDCHIP_EMPTY_VALUE
        row[2] = SOUNDCHIP_EMPTY_VALUE
        return true
    elseif rl.isKeyPressed(rl.keyboardKey.PERIOD) then
        row[0] = SOUNDCHIP_NOTE_MUTE
        row[1] = SOUNDCHIP_EMPTY_VALUE
        row[2] = SOUNDCHIP_EMPTY_VALUE
        return true
    else
        for i = 0, < PIANO_KEYS_COUNT do
            if rl.isKeyPressed(piano_keys[i]) then
                if vm.soundchip.audio_state.playing_flags == 0 then
                    local note: uint8 = (@uint8)(i + data.octave * SOUNDCHIP_OCTAVE_SIZE)

                    row[0] = note

                    if row[1] == SOUNDCHIP_EMPTY_VALUE then
                        row[1] = data.prev_volume
                    else
                        data.prev_volume = row[1]
                    end
                    
                    if row[2] == SOUNDCHIP_EMPTY_VALUE then
                        row[2] = data.prev_instrument
                    else
                        data.prev_instrument = row[2]
                    end

                    vm.soundchip:playPreviewNote(note, data.prev_volume, data.prev_instrument)
                    return true
                end
            elseif rl.isKeyReleased(piano_keys[i]) then
                vm.soundchip:stopPreviewNote()
                return false
            end
        end
    end

    return false
end

global function stateTrackerInit(sm: *StateMachine, vm: *EVM): void
    data.clipboard_len = 0
    data.clipboard_type = 0
    data.selection_start = 0
    data.selection_len = 0
    data.current_editor = Editor.SONG
    data.octave = 4
    data.song_id = 0
    data.song_x = 0
    data.song_y = 0
    data.instrument_id = SOUNDCHIP_EMPTY_VALUE
    data.instrument_x = 0
    data.instrument_y = 0
    data.track = 0
    data.pattern_x = 0
    data.pattern_y = 0
    data.prev_volume = 0xA0
    data.prev_instrument = 0
end

global function stateTrackerEnter(sm: *StateMachine, vm: *EVM): void
    vm.gpu:setRenderTexture(RenderTexture.TRACKER)
end

global function stateTrackerExit(sm: *StateMachine, vm: *EVM): void
end

global function stateTrackerUpdate(sm: *StateMachine, vm: *EVM): void
    local is_shift_down: boolean = rl.isKeyDown(rl.keyboardKey.LEFT_SHIFT) or rl.isKeyDown(rl.keyboardKey.RIGHT_SHIFT)
    local is_ctrl_down: boolean = rl.isKeyDown(rl.keyboardKey.LEFT_CONTROL) or rl.isKeyDown(rl.keyboardKey.RIGHT_CONTROL)
    local is_alt_down: boolean = rl.isKeyDown(rl.keyboardKey.LEFT_ALT) or rl.isKeyDown(rl.keyboardKey.RIGHT_ALT)

    if is_ctrl_down and rl.isKeyPressed(rl.keyboardKey.LEFT) then
        sm.queued_state = StateID.MAIN
        return
    end

    if is_ctrl_down and rl.isKeyPressed(rl.keyboardKey.I) then
        sm:resetFileBrowser(core.user_directory, FileBrowserMode.LOAD)
        sm.queued_dialog = DialogID.IMPORT_SAMPLE
        return
    end

    if rl.isKeyPressed(rl.keyboardKey.SPACE) then
        local should_play: boolean = true

        if data.current_editor == Editor.INSTRUMENT and data.instrument_y == 0 then
            should_play = false
        end

        if should_play then
            if vm.soundchip.audio_state.playing_flags ~= 0 then
                vm.soundchip:stopAllTracks()
            else
                vm.soundchip:playSongRow(data.song_y)
            end
            return
        end
    end

    if vm.soundchip.audio_state.playing_flags ~= 0 then
        local ts: *TrackState = vm.soundchip:getTrackState(data.track)
        data.song_y = ts.song_pos
        data.pattern_y = ts.pattern_pos
        return
    end
    
    if rl.isKeyPressed(rl.keyboardKey.MINUS) then
        data.octave = util.midI(0, data.octave - 1, SOUNDCHIP_MAX_OCTAVE)
    elseif rl.isKeyPressed(rl.keyboardKey.EQUAL) then
        data.octave = util.midI(0, data.octave + 1, SOUNDCHIP_MAX_OCTAVE)
    end

    switch data.current_editor do
        case Editor.SONG then
            if rl.isKeyPressed(rl.keyboardKey.TAB) then
                if is_shift_down then
                    data.song_x = util.wrapI(data.song_x - 2, 0, 16)
                    data.track = util.wrapI(data.track - 1, 0, 8)
                else
                    data.song_x = util.wrapI(data.song_x + 2, 0, 16)
                    data.track = util.wrapI(data.track + 1, 0, 8)
                end
            elseif rl.isKeyPressed(rl.keyboardKey.PAGE_UP) then
                data.song_y = util.wrapI(data.song_y - 8, 0, 256)
            elseif rl.isKeyPressed(rl.keyboardKey.PAGE_DOWN) then
                data.song_y = util.wrapI(data.song_y + 8, 0, 256)
            elseif rl.isKeyPressed(rl.keyboardKey.HOME) then
                data.song_y = 0
            elseif rl.isKeyPressed(rl.keyboardKey.END) then
                data.song_y = 255
            elseif rl.isKeyPressed(rl.keyboardKey.UP) then
                if is_alt_down then
                    -- ???
                else
                    data.song_y = util.wrapI(data.song_y - 1, 0, 256)
                end
            elseif rl.isKeyPressed(rl.keyboardKey.DOWN) then
                if is_alt_down then
                    data.current_editor = Editor.PATTERN
                else
                    data.song_y = util.wrapI(data.song_y + 1, 0, 256)
                end
            elseif rl.isKeyPressed(rl.keyboardKey.LEFT) then
                if is_alt_down then
                    -- ???
                else
                    if data.song_x & 1 == 0 then
                        data.track = util.wrapI(data.track - 1, 0, 8)
                    end
                    data.song_x = util.wrapI(data.song_x - 1, 0, 16)
                end
            elseif rl.isKeyPressed(rl.keyboardKey.RIGHT) then
                if is_alt_down then
                    -- ???
                else
                    if data.song_x & 1 == 1 then
                        data.track = util.wrapI(data.track + 1, 0, 8)
                    end
                    data.song_x = util.wrapI(data.song_x + 1, 0, 16)
                end
            else
                if input.hexEdit(
                    &vm.soundchip.song_data[8 * data.song_y + (data.song_x /// 2)],
                    &data.byte_val,
                    data.song_x & 1,
                    true
                ) then
                    data.song_y = util.wrapI(data.song_y + 1, 0, 256)
                end
            end
        case Editor.PATTERN then
            if rl.isKeyPressed(rl.keyboardKey.TAB) then
                if is_shift_down then
                    data.song_x = util.wrapI(data.song_x - 2, 0, 16)
                    data.track = util.wrapI(data.track - 1, 0, 8)
                else
                    data.song_x = util.wrapI(data.song_x + 2, 0, 16)
                    data.track = util.wrapI(data.track + 1, 0, 8)
                end
            elseif rl.isKeyPressed(rl.keyboardKey.PAGE_UP) then
                data.pattern_y = data.pattern_y - 16
                if data.pattern_y < 0 then
                    data.song_y = util.wrapI(data.song_y - 1, 0, 256)
                end
                data.pattern_y = util.wrapI(data.pattern_y, 0, 64)
            elseif rl.isKeyPressed(rl.keyboardKey.PAGE_DOWN) then
                data.pattern_y = data.pattern_y + 16
                if data.pattern_y > 63 then
                    data.song_y = util.wrapI(data.song_y + 1, 0, 256)
                end
                data.pattern_y = util.wrapI(data.pattern_y, 0, 64)
            elseif rl.isKeyPressed(rl.keyboardKey.HOME) then
                data.pattern_y = 0
            elseif rl.isKeyPressed(rl.keyboardKey.END) then
                data.pattern_y = 63
            elseif rl.isKeyPressed(rl.keyboardKey.UP) then
                if is_alt_down then
                    data.current_editor = Editor.SONG
                else
                    data.pattern_y = data.pattern_y - 1
                    if data.pattern_y < 0 then
                        data.pattern_y = 63
                        data.song_y = util.wrapI(data.song_y - 1, 0, 256)
                    end
                end
            elseif rl.isKeyPressed(rl.keyboardKey.DOWN) then
                if is_alt_down then
                    data.current_editor = Editor.INSTRUMENT
                else
                    data.pattern_y = data.pattern_y + 1
                    if data.pattern_y > 63 then
                        data.pattern_y = 0
                        data.song_y = util.wrapI(data.song_y + 1, 0, 256)
                    end
                end
            elseif rl.isKeyPressed(rl.keyboardKey.LEFT) then
                if is_alt_down then
                    -- ???
                else
                    data.pattern_x = data.pattern_x - 1
                    if data.pattern_x < 0 then
                        data.pattern_x = 7
                        data.song_x = util.wrapI(data.song_x - 2, 0, 16)
                        data.track = util.wrapI(data.track - 1, 0, 8)
                    end
                end
            elseif rl.isKeyPressed(rl.keyboardKey.RIGHT) then
                if is_alt_down then
                    -- ???
                else
                    data.pattern_x = data.pattern_x + 1
                    if data.pattern_x > 7 then
                        data.pattern_x = 0
                        data.song_x = util.wrapI(data.song_x + 2, 0, 16)
                        data.track = util.wrapI(data.track + 1, 0, 8)
                    end
                end
            else
                switch data.pattern_x do
                    case 0 then -- note
                        if doNoteInput(vm) then
                            data.pattern_y = util.wrapI(data.pattern_y + 1, 0, 64)
                        end
                    case 1,2,3,4,6,7 then -- vol, inst, arg
                        local nibble_index: uinteger
                        local byte_index: uinteger
                        local row: *[0]uint8 = vm.soundchip:getPatternRow(vm.soundchip.song_data[8 * data.song_y + data.track], data.pattern_y)

                        if data.pattern_x < 6 then
                            nibble_index = (data.pattern_x - 1) & 1
                            byte_index = (data.pattern_x < 3) and 1 or 2
                        else
                            nibble_index = data.pattern_x & 1
                            byte_index = 4
                        end

                        if input.hexEdit(
                            &row[byte_index],
                            &data.byte_val,
                            nibble_index,
                            true
                        ) then
                            if byte_index == 1 then
                                data.prev_volume = data.byte_val
                            elseif byte_index == 2 then
                                data.prev_instrument = data.byte_val
                                data.instrument_id = data.byte_val
                                data.instrument_x = 0
                                data.instrument_y = 0
                            end
                            data.pattern_y = util.wrapI(data.pattern_y + 1, 0, 64)
                        end
                    case 5 then -- fx
                        do end
                end
            end
        case Editor.INSTRUMENT then
            if rl.isKeyPressed(rl.keyboardKey.UP) then
                if is_alt_down then
                    data.current_editor = Editor.PATTERN
                elseif is_shift_down then
                    data.instrument_id = data.instrument_id + 0x10
                    data.instrument_x = 0
                    data.instrument_y = 0
                else
                    data.instrument_x = 0
                    data.instrument_y = util.wrapI(data.instrument_y - 1, 0, 6)
                    if data.instrument_y == 4 then
                        local idata: *[0]uint8 = vm.soundchip:getInstrument(data.instrument_id)
                        if idata[0] & InstrumentFlag.LOOP_MASK ~= InstrumentFlag.LOOP_RANGE then
                            data.instrument_y = data.instrument_y - 1
                        end
                    end
                end
            elseif rl.isKeyPressed(rl.keyboardKey.DOWN) then
                if is_alt_down then
                    -- ???
                elseif is_shift_down then
                    data.instrument_id = data.instrument_id - 0x10
                    data.instrument_x = 0
                    data.instrument_y = 0
                else
                    data.instrument_x = 0
                    data.instrument_y = util.wrapI(data.instrument_y + 1, 0, 6)
                    if data.instrument_y == 4 then
                        local idata: *[0]uint8 = vm.soundchip:getInstrument(data.instrument_id)
                        if idata[0] & InstrumentFlag.LOOP_MASK ~= InstrumentFlag.LOOP_RANGE then
                            data.instrument_y = data.instrument_y + 1
                        end
                    end
                end
            elseif is_shift_down and rl.isKeyPressed(rl.keyboardKey.LEFT) then
                data.instrument_id = data.instrument_id - 1
                data.instrument_x = 0
                data.instrument_y = 0
            elseif is_shift_down and rl.isKeyPressed(rl.keyboardKey.RIGHT) then
                data.instrument_id = data.instrument_id + 1
                data.instrument_x = 0
                data.instrument_y = 0
            else
                local idata: *[0]uint8 = vm.soundchip:getInstrument(data.instrument_id)
                local flags: uint8 = idata[0]
                local sample_start: uint32 = ((@uint32)(idata[1]) << 16) | ((@uint32)(idata[2]) << 8) | (@uint32)(idata[3])
                local sample_end: uint32 = ((@uint32)(idata[4]) << 16) | ((@uint32)(idata[5]) << 8) | (@uint32)(idata[6])
                local sustain_start: uint32 = ((@uint32)(idata[7]) << 16) | ((@uint32)(idata[8]) << 8) | (@uint32)(idata[9])
                local sustain_end: uint32 = ((@uint32)(idata[10]) << 16) | ((@uint32)(idata[11]) << 8) | (@uint32)(idata[12])
                local attack: uint8 = idata[13]
                local decay: uint8 = idata[14]
                local sustain: uint8 = idata[15]
                local release: uint8 = idata[16]

                switch data.instrument_y do
                    case 0 then -- name
                        if rl.isKeyPressed(rl.keyboardKey.LEFT) then
                            data.instrument_x = util.wrapI(data.instrument_x - 1, 0, 8)
                        elseif rl.isKeyPressed(rl.keyboardKey.RIGHT) then
                            data.instrument_x = util.wrapI(data.instrument_x + 1, 0, 8)
                        else
                            local c: cint = rl.getCharPressed()
                            while c ~= 0 do
                                idata[17 + data.instrument_x] = (@uint8)(c)
                                data.instrument_x = util.wrapI(data.instrument_x + 1, 0, 8)
                                c = rl.getCharPressed()
                            end
                        end
                    case 1 then -- sample mode
                        if rl.isKeyPressed(rl.keyboardKey.LEFT) or rl.isKeyPressed(rl.keyboardKey.RIGHT) then
                            flags = flags ~ InstrumentFlag.MANUAL
                            idata[0] = flags
                            idata[1] = 0
                            idata[2] = 0
                            idata[3] = 0
                        end
                    case 2 then -- sample start+end/wavmap id
                        if flags & InstrumentFlag.MANUAL ~= 0 then
                            if rl.isKeyPressed(rl.keyboardKey.LEFT) then
                                data.instrument_x = util.wrapI(data.instrument_x - 1, 0, 12)
                            elseif rl.isKeyPressed(rl.keyboardKey.RIGHT) then
                                data.instrument_x = util.wrapI(data.instrument_x + 1, 0, 12)
                            else
                                if input.hexEdit(
                                    &idata[1 + data.instrument_x /// 2],
                                    &data.byte_val,
                                    data.instrument_x & 1,
                                    false
                                ) then
                                    data.instrument_x = util.wrapI(data.instrument_x + 1, 0, 12)
                                end
                            end
                        else
                            if rl.isKeyPressed(rl.keyboardKey.LEFT) then
                                data.instrument_x = util.wrapI(data.instrument_x - 1, 0, 3)
                            elseif rl.isKeyPressed(rl.keyboardKey.RIGHT) then
                                data.instrument_x = util.wrapI(data.instrument_x + 1, 0, 3)
                            else
                                local byte_index: uinteger
                                local nibble_index: uinteger
                                switch data.instrument_x do
                                    case 0 then
                                        byte_index = 2
                                        nibble_index = 1
                                    case 1 then
                                        byte_index = 3
                                        nibble_index = 0
                                    case 2 then
                                        byte_index = 3
                                        nibble_index = 1
                                end
                                if input.hexEdit(
                                    &idata[byte_index],
                                    &data.byte_val,
                                    nibble_index,
                                    false
                                ) then
                                    if idata[2] > 0x01 then
                                        idata[2] = 0x1
                                    end
                                    data.instrument_x = util.wrapI(data.instrument_x + 1, 0, 3)
                                end
                            end
                        end
                    case 3 then -- loop mode
                        local loop_mode: uint8 = flags & InstrumentFlag.LOOP_MASK
                        if rl.isKeyPressed(rl.keyboardKey.LEFT) then
                            loop_mode = util.wrapI(loop_mode - 1, 0, 4)
                            flags = (flags & ~InstrumentFlag.LOOP_MASK) | loop_mode
                            idata[0] = flags
                        elseif rl.isKeyPressed(rl.keyboardKey.RIGHT) then
                            loop_mode = util.wrapI(loop_mode + 1, 0, 4)
                            flags = (flags & ~InstrumentFlag.LOOP_MASK) | loop_mode
                            idata[0] = flags
                        end
                    case 4 then -- loop range
                        if rl.isKeyPressed(rl.keyboardKey.LEFT) then
                            data.instrument_x = util.wrapI(data.instrument_x - 1, 0, 12)
                        elseif rl.isKeyPressed(rl.keyboardKey.RIGHT) then
                            data.instrument_x = util.wrapI(data.instrument_x + 1, 0, 12)
                        else
                            if input.hexEdit(
                                &idata[7 + data.instrument_x /// 2],
                                &data.byte_val,
                                data.instrument_x & 1,
                                false
                            ) then
                                data.instrument_x = util.wrapI(data.instrument_x + 1, 0, 12)
                            end
                        end
                    case 5 then -- adsr
                        if rl.isKeyPressed(rl.keyboardKey.LEFT) then
                            data.instrument_x = util.wrapI(data.instrument_x - 1, 0, 8)
                        elseif rl.isKeyPressed(rl.keyboardKey.RIGHT) then
                            data.instrument_x = util.wrapI(data.instrument_x + 1, 0, 8)
                        else
                            if input.hexEdit(
                                &idata[13 + data.instrument_x /// 2],
                                &data.byte_val,
                                data.instrument_x & 1,
                                false
                            ) then
                                data.instrument_x = util.wrapI(data.instrument_x + 1, 0, 8)
                            end
                        end
                end
            end
    end
end

global function stateTrackerDraw(sm: *StateMachine, vm: *EVM): void
    rl.clearBackground({0, 0, 0, 0})
    vm.gpu:camera2D(-1)

    -- TODO: disable editing when in empty phrase/instrument

    --drawLevels(sm, vm)
    drawSong(sm, vm)
    drawPatterns(sm, vm)
    drawInstrument(sm, vm)
end

global function stateTrackerCleanup(sm: *StateMachine, vm: *EVM): void
end
