require("statemachine")

--[[
    TODO:

    - draw audio levels
    - draw playheads
    - implement sample playback
]]

local PIANO_KEYS_COUNT <comptime> = SOUNDCHIP_OCTAVE_SIZE * 2

local Editor = @enum {
    SONG = 0,
    PATTERN,
    COUNT
}

local TrackerData = @record {
    clipboard: [SOUNDCHIP_SONG_SIZE]uint8,
    clipboard_len: uinteger,
    clipboard_type: uinteger, -- type of data currently in clipboard
    selection_start: uinteger,
    selection_len: uinteger,
    current_editor: integer,
    octave: uint8,
    song_id: uint8,
    song_x: integer,
    song_y: integer,
    pattern_id: uint8,
    pattern_x: integer,
    pattern_y: integer,
    cursor_x: *integer,
    cursor_y: *integer
}

local note_names: [SOUNDCHIP_OCTAVE_SIZE]string = {
    "C-",
    "C#",
    "D-",
    "D#",
    "E-",
    "F-",
    "F#",
    "G-",
    "G#",
    "A-",
    "A#",
    "B-"
}

local piano_keys: [PIANO_KEYS_COUNT]cint = {
    -- base octave
    rl.keyboardKey.Z, -- C
    rl.keyboardKey.S, -- C#
    rl.keyboardKey.X, -- D
    rl.keyboardKey.D, -- D#
    rl.keyboardKey.C, -- E
    rl.keyboardKey.V, -- F
    rl.keyboardKey.G, -- F#
    rl.keyboardKey.B, -- G
    rl.keyboardKey.H, -- G#
    rl.keyboardKey.N, -- A
    rl.keyboardKey.J, -- A#
    rl.keyboardKey.M, -- B

    -- octave + 1
    rl.keyboardKey.Q,     -- C
    rl.keyboardKey.TWO,   -- C#
    rl.keyboardKey.W,     -- D
    rl.keyboardKey.THREE, -- D#
    rl.keyboardKey.E,     -- E
    rl.keyboardKey.R,     -- F
    rl.keyboardKey.FIVE,  -- F#
    rl.keyboardKey.T,     -- G
    rl.keyboardKey.SIX,   -- G#
    rl.keyboardKey.Y,     -- A
    rl.keyboardKey.SEVEN, -- A#
    rl.keyboardKey.U,     -- B
}

local data: TrackerData

local function drawLevels(this: *State, sm: *StateMachine, vm: *e3d.EVM): void
    local l: BKFrame = 0
    local r: BKFrame = 0

    for i = 0, < SOUNDCHIP_FRAMES_PER_UPDATE do
        local idx: uinteger = i * 2
        local ltemp: BKFrame = math.abs(vm.soundchip.amem[idx])
        local rtemp: BKFrame = math.abs(vm.soundchip.amem[idx + 1])

        if ltemp > l then l = ltemp end
        if rtemp > r then r = rtemp end
    end

    print("left", l, "right", r)
end

local function drawSong(this: *State, sm: *StateMachine, vm: *e3d.EVM): void
    local cursor_color: uint32
    local text_color: uint32

    if data.current_editor == Editor.SONG then
        cursor_color = GPU_RED
        text_color = GPU_WHITE
    else
        cursor_color = GPU_GRAY
        text_color = GPU_GRAY
    end

    vm.gpu:drawRect2D(18 + (data.song_x * 12), 9 + (data.song_y * 9), 12, 9, cursor_color)

    vm.gpu:print2D(18, 0, text_color, "0 1 2 3 4 5 6 7")

    for x = 0, < SOUNDCHIP_TRACK_COUNT do
        for y = 0, < 16 do
            local startx: int32 = x * 12
            local starty: int32 = 9 + y * 9
            local byte_val: uint8 = vm.soundchip.song_data[8 * y + x]

            vm.gpu:printHexByte2D(0, starty, text_color, y)

            if byte_val == SOUNDCHIP_EMPTY_VALUE then
                vm.gpu:print2D(startx + 18, starty, text_color, "..")
            else
                vm.gpu:printHexByte2D(startx + 18, starty, text_color, byte_val)
            end
        end
    end
end

local function getNoteText(note: uint8): string
    if note == SOUNDCHIP_NOTE_MUTE then
        return "OFF"
    elseif note == SOUNDCHIP_NOTE_RELEASE then
        return "REL"
    else
        local base_note: uint8 = note %%% SOUNDCHIP_OCTAVE_SIZE
        local octave: uint8 = note /// SOUNDCHIP_OCTAVE_SIZE
        return string.format("%s%1X", note_names[base_note], octave)
    end
end

local function drawPatterns(this: *State, sm: *StateMachine, vm: *e3d.EVM): void
    local cursor_color: uint32
    local text_color: uint32

    if data.current_editor == Editor.PATTERN then
        cursor_color = GPU_RED
        text_color = GPU_WHITE
    else
        cursor_color = GPU_GRAY
        text_color = GPU_GRAY
    end

    if data.pattern_x == 0 then
        vm.gpu:drawRect2D(174, 9 + (data.pattern_y * 9), 18, 9, cursor_color)
    else
        vm.gpu:drawRect2D(192 + ((data.pattern_x - 1) * 12), 9 + (data.pattern_y * 9), 12, 9, cursor_color)
    end

    vm.gpu:printHexByte2D(162, 0, text_color, data.pattern_id)

    for i = 0, < 16 do
        local y: int32 = 9 + i * 9
        local row: *[0]uint8 = vm.soundchip:getPatternRow(data.pattern_id, i)

        -- note, vol, pan, instr, fx0, arg0, fx1, arg1
        local note_val: uint8 = row[0]

        vm.gpu:printHexNibble2D(162, y, text_color, (@uint8)(i))

        if note_val == SOUNDCHIP_EMPTY_VALUE then
            vm.gpu:print2D(174, y, text_color, "...")
        else
            vm.gpu:print2D(174, y, text_color, getNoteText(note_val))
        end

        for i = 1, < 8 do
            local val: uint8 = row[i]
            local x: int32 = 192 + ((i - 1) * 12)
            if val == SOUNDCHIP_EMPTY_VALUE then
                vm.gpu:print2D(x, y, text_color, "..")
            else
                vm.gpu:printHexByte2D(x, y, text_color, val)
            end
        end
    end
end

local function doNoteInput(vm: *e3d.EVM): void
    local row: *[0]uint8 = vm.soundchip:getPatternRow(data.pattern_id, data.pattern_y)

    if rl.isKeyPressed(rl.keyboardKey.BACKSPACE) then
        row[0] = SOUNDCHIP_EMPTY_VALUE
        data.pattern_y = data.pattern_y + 1
    elseif rl.isKeyPressed(rl.keyboardKey.COMMA) then
        row[0] = SOUNDCHIP_NOTE_RELEASE
        data.pattern_y = data.pattern_y + 1
    elseif rl.isKeyPressed(rl.keyboardKey.PERIOD) then
        row[0] = SOUNDCHIP_NOTE_MUTE
        data.pattern_y = data.pattern_y + 1
    else
        for i = 0, < PIANO_KEYS_COUNT do
            if rl.isKeyPressed(piano_keys[i]) then
                if vm.soundchip.audio_state.playing_flags == 0 then
                    local note: uint8 = (@uint8)(i + data.octave * SOUNDCHIP_OCTAVE_SIZE)
                    row[0] = note
                    data.pattern_y = data.pattern_y + 1
                    vm.soundchip:playPreviewNote(note)
                end
            elseif rl.isKeyReleased(piano_keys[i]) then
                vm.soundchip:stopPreviewNote()
            end
        end
    end

    if data.pattern_y > 15 then
        data.pattern_y = 0
    end
end

global function stateTrackerInit(this: *State, sm: *StateMachine, vm: *e3d.EVM): void
    data.clipboard_len = 0
    data.clipboard_type = 0
    data.selection_start = 0
    data.selection_len = 0
    data.current_editor = Editor.SONG
    data.octave = 4
    data.song_id = 0
    data.song_x = 0
    data.song_y = 0
    data.pattern_id = 0
    data.pattern_x = 0
    data.pattern_y = 0
    data.cursor_x = &data.song_x
    data.cursor_y = &data.song_y
end

global function stateTrackerUpdate(this: *State, sm: *StateMachine, vm: *e3d.EVM): integer
    local is_shift_down: boolean = rl.isKeyDown(rl.keyboardKey.LEFT_SHIFT) or rl.isKeyDown(rl.keyboardKey.RIGHT_SHIFT)

    if rl.isKeyPressed(rl.keyboardKey.ESCAPE) then
        sm.queued_state = StateID.MAIN -- switch to main state next frame
    elseif rl.isKeyPressed(rl.keyboardKey.TAB) then
        if is_shift_down then
            data.current_editor = data.current_editor - 1
        else
            data.current_editor = data.current_editor + 1
        end

        if data.current_editor < 0 then
            data.current_editor = Editor.COUNT - 1
        elseif data.current_editor > Editor.COUNT - 1 then
            data.current_editor = 0
        end

        switch data.current_editor do
            case Editor.SONG then
                data.cursor_x = &data.song_x
                data.cursor_y = &data.song_y
            case Editor.PATTERN then
                data.cursor_x = &data.pattern_x
                data.cursor_y = &data.pattern_y
        end
    else
        if rl.isKeyPressed(rl.keyboardKey.SPACE) then
            if vm.soundchip.audio_state.playing_flags ~= 0 then
                vm.soundchip:stopAllTracks()
            else
                vm.soundchip:playSongRow(data.song_y)
            end
        elseif rl.isKeyPressed(rl.keyboardKey.UP) then
            if is_shift_down then
                switch data.current_editor do
                    case Editor.PATTERN then
                        data.pattern_id = data.pattern_id + 0x10
                end
            else
                $data.cursor_y = $data.cursor_y - 1
            end
        elseif rl.isKeyPressed(rl.keyboardKey.DOWN) then
            if is_shift_down then
                switch data.current_editor do
                    case Editor.PATTERN then
                        data.pattern_id = data.pattern_id - 0x10
                end
            else
                $data.cursor_y = $data.cursor_y + 1
            end
        elseif rl.isKeyPressed(rl.keyboardKey.LEFT) then
            if is_shift_down then
                switch data.current_editor do
                    case Editor.PATTERN then
                        data.pattern_id = data.pattern_id - 1
                end
            else
                $data.cursor_x = $data.cursor_x - 1
            end
        elseif rl.isKeyPressed(rl.keyboardKey.RIGHT) then
            if is_shift_down then
                switch data.current_editor do
                    case Editor.PATTERN then
                        data.pattern_id = data.pattern_id + 1
                end
            else
                $data.cursor_x = $data.cursor_x + 1
            end
        elseif rl.isKeyPressed(rl.keyboardKey.MINUS) then
            if data.octave > SOUNDCHIP_MIN_OCTAVE then
                data.octave = data.octave - 1
            end
        elseif rl.isKeyPressed(rl.keyboardKey.EQUAL) then
            if data.octave < SOUNDCHIP_MAX_OCTAVE - 1 then
                data.octave = data.octave + 1
            end
        else
            if data.current_editor == Editor.PATTERN and data.pattern_x == 0 then
                doNoteInput(vm)
            end
        end
    end
    
    return StateID.TRACKER
end

global function stateTrackerDraw(this: *State, sm: *StateMachine, vm: *e3d.EVM): integer
    vm.gpu:clear(GPU_BLACK)
    
    vm.gpu:camera2D(0)

    drawLevels(this, sm, vm)
    drawSong(this, sm, vm)
    drawPatterns(this, sm, vm)

    return StateID.TRACKER
end
