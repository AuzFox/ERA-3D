require("statemachine")

local TrackerData = @record {
    clipboard: [SOUNDCHIP_SONG_SIZE]uint8,
    clipboard_len: uinteger,
    clipboard_type: uinteger, -- type of data currently in clipboard
    selection_start: uinteger,
    selection_len: uinteger,
    current_editor: uinteger,
    track: uint8,
    song_id: uint8,
    song_pos: uint8,
    chain_id: uint8,
    chain_pos: uint8,
    phrase_id: uint8,
    phrase_pos: uint8
}

local note_names: [SOUNDCHIP_OCTAVE_SIZE]string = {
    "C ",
    "C#",
    "D ",
    "D#",
    "E ",
    "F ",
    "F#",
    "G ",
    "G#",
    "A ",
    "A#",
    "B "
}

local data: TrackerData

local function draw_song(this: *State, sm: *StateMachine, vm: *e3d.EVM): void
    vm.gpu:drawRect2D(18 + ((data.song_pos %%% 8) * 12), 9 + ((data.song_pos /// 8) * 9), 12, 9, 0xFF0000FF)

    vm.gpu:print2D(18, 0, GPU_WHITE, "0 1 2 3 4 5 6 7")

    for x = 0, < SOUNDCHIP_TRACK_COUNT do
        for y = 0, < 16 do
            local startx: int32 = x * 12
            local starty: int32 = 9 + y * 9
            local byte_val: uint8 = vm.soundchip.song_data[8 * y + x]

            vm.gpu:printHexByte2D(0, starty, GPU_WHITE, y)

            if byte_val == SOUNDCHIP_EMPTY_VALUE then
                vm.gpu:print2D(startx + 18, starty, 0xCCCCCCFF, "..")
            else
                vm.gpu:printHexByte2D(startx + 18, starty, GPU_WHITE, byte_val)
            end
        end
    end
end

local function draw_chain(this: *State, sm: *StateMachine, vm: *e3d.EVM): void
    vm.gpu:drawRect2D(132 + ((data.chain_pos %%% 2) * 12), 9 + ((data.chain_pos /// 2) * 9), 12, 9, 0xFF0000FF)

    vm.gpu:printHexByte2D(120, 0, GPU_WHITE, data.chain_id)

    local chain: *[0]uint8 = vm.soundchip:get_chain(data.chain_id)
    for i = 0, < 16 do
        local y: int32 = 9 + i * 9
        local byte_index: uinteger = 2 * i
        local phrase_val: uint8 = chain[byte_index]
        local transpose_val: uint8 = chain[byte_index + 1]

        vm.gpu:printHexNibble2D(120, y, GPU_WHITE, (@uint8)(i))

        if phrase_val == SOUNDCHIP_EMPTY_VALUE then
            vm.gpu:print2D(132, y, 0xCCCCCCFF, "..")
        else
            vm.gpu:printHexByte2D(132, y, GPU_WHITE, phrase_val)
        end

        vm.gpu:printHexByte2D(144, y, GPU_WHITE, transpose_val)
    end
end

local function get_note_text(note: uint8): string
    if note == SOUNDCHIP_NOTE_MUTE then
        return "MUT"
    elseif note == SOUNDCHIP_NOTE_MUTE then
        return "REL"
    else
        local base_note: uint8 = note %%% SOUNDCHIP_OCTAVE_SIZE
        local octave: uint8 = note /// SOUNDCHIP_OCTAVE_SIZE
        return string.format("%s%1X", note_names[base_note], octave)
    end
end

local function draw_phrase(this: *State, sm: *StateMachine, vm: *e3d.EVM): void
    local cursor_column: uinteger = data.phrase_pos %%% 8

    if cursor_column == 0 then
        vm.gpu:drawRect2D(174, 9 + ((data.phrase_pos /// 8) * 9), 18, 9, 0xFF0000FF)
    else
        vm.gpu:drawRect2D(192 + ((cursor_column - 1) * 12), 9 + ((data.phrase_pos /// 8) * 9), 12, 9, 0xFF0000FF)
    end

    vm.gpu:printHexByte2D(162, 0, GPU_WHITE, data.phrase_id)

    for i = 0, < 16 do
        local y: int32 = 9 + i * 9
        local row: *[0]uint8 = vm.soundchip:get_phrase_row(data.phrase_id, i)

        -- note, vol, pan, instr, fx0, arg0, fx1, arg1
        local note_val: uint8 = row[0]

        vm.gpu:printHexNibble2D(162, y, GPU_WHITE, (@uint8)(i))

        if note_val == SOUNDCHIP_EMPTY_VALUE then
            vm.gpu:print2D(174, y, 0xCCCCCCFF, "...")
        else
            vm.gpu:print2D(174, y, GPU_WHITE, get_note_text(note_val))
        end

        for i = 1, < 8 do
            local val: uint8 = row[i]
            local x: int32 = 192 + ((i - 1) * 12)
            if val == SOUNDCHIP_EMPTY_VALUE then
                vm.gpu:print2D(x, y, 0xCCCCCCFF, "..")
            else
                vm.gpu:printHexByte2D(x, y, GPU_WHITE, val)
            end
        end
    end
end

global function state_tracker_init(this: *State, sm: *StateMachine, vm: *e3d.EVM): void
    data.clipboard_len = 0
    data.clipboard_type = 0
    data.selection_start = 0
    data.selection_len = 0
    data.current_editor = 0
    data.track = 0
    data.song_id = 0
    data.song_pos = 0
    data.chain_id = 0
    data.chain_pos = 0
    data.phrase_id = 0
    data.phrase_pos = 0
end

global function state_tracker_update(this: *State, sm: *StateMachine, vm: *e3d.EVM): integer
    if rl.isKeyPressed(rl.keyboardKey.M) then
        sm.queued_state = StateID.MAIN -- switch to main state next frame
    end
    
    return StateID.TRACKER
end

global function state_tracker_draw(this: *State, sm: *StateMachine, vm: *e3d.EVM): integer
    vm.gpu:clear(0x000000FF)
    
    vm.gpu:camera2D(0)

    draw_song(this, sm, vm)
    draw_chain(this, sm, vm)
    draw_phrase(this, sm, vm)

    return StateID.TRACKER
end
