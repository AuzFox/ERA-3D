require("statemachine")

local current_texbank: uint8
local current_objbank: uint8
local current_wavbank: uint8
local current_seqbank: uint8
local run_cart: boolean

global function stateRunInit(): void
end

global function stateRunEnter(): void
    gpu:setRenderTexture(RenderTexture.CODE)

    current_texbank = gpu.current_texbank
    current_objbank = gpu.current_objbank
    gpu:setBankPointers(
        GPUBank.SYSTEM,
        GPUBank.SYSTEM
    )
    gpu.update_tex = true
    
    current_wavbank = soundchip.current_wavbank
    current_seqbank = soundchip.current_seqbank
    soundchip:setBankPointers(
        SoundchipBank.SYSTEM,
        SoundchipBank.SYSTEM
    )
    
    run_cart = true
end

global function stateRunExit(): void
    gpu:setBankPointers(
        current_texbank,
        current_objbank
    )
    gpu.update_tex = true
    
    soundchip:setBankPointers(
        current_wavbank,
        current_seqbank
    )

    rl.enableCursor()
end

global function stateRunUpdate(): void
    if rl.isKeyPressed(rl.keyboardKey.ESCAPE) then
        run_cart = false
        statemachine:back()
    end
    
    if not vm:callHook(Hook.UPDATE) then
        core:log(LogEntryType.RUNTIME_ERROR, vm.error, false)
        core:popup(LogEntryType.RUNTIME_ERROR, "a runtime error occurred. press [CTRL+ENTER] to view log")
        run_cart = false
        statemachine:back()
    end
    --print("update()", vm.cycle_count)
end

global function stateRunDraw(): void
    if not run_cart then
        return
    end

    gpu:camera3D(0) -- configure default camera
    gpu.render_state.flags_tmccs0fl = gpu.render_state.flags_tmccs0fl | GPU_DEPTH_TEST_BIT -- camera3D() enables depth test

    gpu:enableRenderState()
    if not vm:callHook(Hook.DRAW) then
        core:log(LogEntryType.RUNTIME_ERROR, vm.error, false)
        core:popup(LogEntryType.RUNTIME_ERROR, "a runtime error occurred. press [CTRL+ENTER] to view log")
        statemachine:back()
    end
    gpu:disableRenderState()
    --print("draw()", vm.cycle_count)
    vm.cycle_count = 0
end

global function stateRunCleanup(): void
end
