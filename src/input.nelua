require("raylib")

global input = @record {}

global input.PLAYER_COUNT <comptime> = 4
global input.HEX_KEYS_COUNT <comptime> = 16

-- emulate a PS1-like controller
global input.Button = @enum {
	UP = 0,
	DOWN,
	LEFT,
	RIGHT,
	TRIANGLE,
	CROSS,
	SQUARE,
	CIRCLE,
	L1,
	L2,
	R1,
	R2,
	SELECT,
	START,
	COUNT -- not an actual button; used to count the number of buttons
}

global input.hex_keys: [input.HEX_KEYS_COUNT]cint = {
    rl.keyboardKey.ZERO,
    rl.keyboardKey.ONE,
    rl.keyboardKey.TWO,
    rl.keyboardKey.THREE,
    rl.keyboardKey.FOUR,
    rl.keyboardKey.FIVE,
    rl.keyboardKey.SIX,
    rl.keyboardKey.SEVEN,
    rl.keyboardKey.EIGHT,
    rl.keyboardKey.NINE,
    rl.keyboardKey.A,
    rl.keyboardKey.B,
    rl.keyboardKey.C,
    rl.keyboardKey.D,
    rl.keyboardKey.E,
    rl.keyboardKey.F
}

global input.button_map: [input.Button.COUNT * input.PLAYER_COUNT]cint
global input.is_shift_down: boolean
global input.is_ctrl_down: boolean
global input.is_alt_down: boolean
global input.left_clicked: boolean
global input.left_click_held: boolean
global input.left_click_released: boolean
global input.left_dragging: boolean
global input.left_drag_x: cint
global input.left_drag_y: cint
global input.right_clicked: boolean
global input.right_click_held: boolean
global input.right_click_released: boolean
global input.right_dragging: boolean
global input.right_drag_x: cint
global input.right_drag_y: cint
global input.middle_clicked: boolean
global input.middle_click_held: boolean
global input.middle_click_released: boolean
global input.middle_dragging: boolean
global input.middle_drag_x: cint
global input.middle_drag_y: cint
global input.mouse_x: cint
global input.mouse_y: cint
global input.mouse_delta_x: cint
global input.mouse_delta_y: cint
global input.mouse_wheel_y: int32

function input.setDefaultButtonMap(): void
	input.button_map[input.Button.UP]       = rl.keyboardKey.UP
	input.button_map[input.Button.DOWN]     = rl.keyboardKey.DOWN
	input.button_map[input.Button.LEFT]     = rl.keyboardKey.LEFT
	input.button_map[input.Button.RIGHT]    = rl.keyboardKey.RIGHT
	input.button_map[input.Button.TRIANGLE] = rl.keyboardKey.W
	input.button_map[input.Button.CROSS]    = rl.keyboardKey.S
	input.button_map[input.Button.SQUARE]   = rl.keyboardKey.A
	input.button_map[input.Button.CIRCLE]   = rl.keyboardKey.D
	input.button_map[input.Button.L1]       = rl.keyboardKey.Q
	input.button_map[input.Button.L2]       = rl.keyboardKey.ONE
	input.button_map[input.Button.R1]       = rl.keyboardKey.E
	input.button_map[input.Button.R2]       = rl.keyboardKey.THREE
	input.button_map[input.Button.SELECT]   = rl.keyboardKey.RIGHT_SHIFT
	input.button_map[input.Button.START]    = rl.keyboardKey.ENTER
end

function input.refresh(screen_x: int32, screen_y: int32, screen_w: int32, screen_h: int32): void
    input.is_shift_down = rl.isKeyDown(rl.keyboardKey.LEFT_SHIFT) or rl.isKeyDown(rl.keyboardKey.RIGHT_SHIFT)
    input.is_ctrl_down = rl.isKeyDown(rl.keyboardKey.LEFT_CONTROL) or rl.isKeyDown(rl.keyboardKey.RIGHT_CONTROL)
    input.is_alt_down = rl.isKeyDown(rl.keyboardKey.LEFT_ALT) or rl.isKeyDown(rl.keyboardKey.RIGHT_ALT)
    input.left_clicked = rl.isMouseButtonPressed(0)
    input.left_click_held = rl.isMouseButtonDown(0)
    input.left_click_released = rl.isMouseButtonReleased(0)
    input.right_clicked = rl.isMouseButtonPressed(1)
    input.right_click_held = rl.isMouseButtonDown(1)
    input.right_click_released = rl.isMouseButtonReleased(1)
    input.middle_clicked = rl.isMouseButtonPressed(2)
    input.middle_click_held = rl.isMouseButtonDown(2)
    input.middle_click_released = rl.isMouseButtonReleased(2)

    local scale: int32 = screen_w /// 480
    local prev_mouse_x: int32 = input.mouse_x
    local prev_mouse_y: int32 = input.mouse_y
    input.mouse_x = (rl.getMouseX() - screen_x) /// scale
    input.mouse_y = (rl.getMouseY() - screen_y) /// scale
    input.mouse_delta_x = input.mouse_x - prev_mouse_x
    input.mouse_delta_y = input.mouse_y - prev_mouse_y
    input.mouse_wheel_y = (@int32)(rl.getMouseWheelMoveV().y)

    if input.left_click_held and not input.left_clicked then
        input.left_drag_x = input.left_drag_x + input.mouse_delta_x
        input.left_drag_y = input.left_drag_y + input.mouse_delta_y
        if not input.left_dragging and (input.mouse_delta_x ~= 0 or input.mouse_delta_y ~= 0) then
            input.left_dragging = true
        end
    elseif input.left_click_released then
        input.left_drag_x = 0
        input.left_drag_y = 0
        input.left_dragging = false
    end

    if input.right_click_held and not input.right_clicked then
        input.right_drag_x = input.right_drag_x + input.mouse_delta_x
        input.right_drag_y = input.right_drag_y + input.mouse_delta_y
        if not input.right_dragging and (input.mouse_delta_x ~= 0 or input.mouse_delta_y ~= 0) then
            input.right_dragging = true
        end
    elseif input.right_click_released then
        input.right_drag_x = 0
        input.right_drag_y = 0
        input.right_dragging = false
    end

    if input.middle_click_held and not input.middle_clicked then
        input.middle_drag_x = input.middle_drag_x + input.mouse_delta_x
        input.middle_drag_y = input.middle_drag_y + input.mouse_delta_y
        if not input.middle_dragging and (input.mouse_delta_x ~= 0 or input.mouse_delta_y ~= 0) then
            input.middle_dragging = true
        end
    elseif input.middle_click_released then
        input.middle_drag_x = 0
        input.middle_drag_y = 0
        input.middle_dragging = false
    end
end

function input.getButtonKeycode(btn: integer): cint
	return input.button_map[btn]
end

function input.setButtonKeycode(btn: integer, keycode: cint): void
	input.button_map[btn] = keycode
end

function input.pressedRepeat(key: cint): boolean
    return rl.isKeyPressed(key) or rl.isKeyPressedRepeat(key)
end

function input.isMouseInRect(x: int32, y: int32, w: int32, h: int32): boolean
    local max_x: int32 = (x + w) - 1
    local max_y: int32 = (y + h) - 1
    if (input.mouse_x < x) or (input.mouse_x > max_x) then return false end
    if (input.mouse_y < y) or (input.mouse_y > max_y) then return false end
    return true
end

function input.clickedRect(button: cint, allow_hold: boolean, x: int32, y: int32, w: int32, h: int32): boolean
    if allow_hold then
        if not rl.isMouseButtonDown(button) then return false end
    else
        if not rl.isMouseButtonPressed(button) then return false end
    end

    -- bounds check
    local max_x: int32 = (x + w) - 1
    local max_y: int32 = (y + h) - 1
    if (input.mouse_x < x) or (input.mouse_x > max_x) then return false end
    if (input.mouse_y < y) or (input.mouse_y > max_y) then return false end

    return true
end

function input.hexEdit(byte_ptr: *[0]uint8, out_byte: *uint8, nibble_index: uinteger, handle_empty: boolean): boolean
    local pressed: boolean = false
    local nibble: uint8

    if handle_empty and rl.isKeyPressed(rl.keyboardKey.BACKSPACE) then
        byte_ptr[0] = SOUNDCHIP_EMPTY_VALUE
        return true
    end

    for i: uint8 = 0, < input.HEX_KEYS_COUNT do
        if rl.isKeyPressed(input.hex_keys[i]) then
            pressed = true
            nibble = i
			break
        end
    end

    if pressed then
        local byte_val: uint8 = byte_ptr[0]

        if handle_empty and byte_val == SOUNDCHIP_EMPTY_VALUE then
            byte_val = 0
        end

        if nibble_index == 0 then
            byte_val = (byte_val & 0x0F) | (nibble << 4)
        else
            byte_val = (byte_val & 0xF0) | nibble
        end

		if out_byte ~= nilptr then
        	$out_byte = byte_val
		end

        byte_ptr[0] = byte_val
    end

    return pressed
end