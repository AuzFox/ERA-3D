require("arg")
require("statemachine")

global function stateMainInit(sm: *StateMachine, vm: *e3d.EVM): void
end

global function stateMainEnter(sm: *StateMachine, vm: *e3d.EVM): void
    vm.gpu:setRenderTexture(RenderTexture.MAIN)
end

global function stateMainExit(sm: *StateMachine, vm: *e3d.EVM): void
end

global function stateMainUpdate(sm: *StateMachine, vm: *e3d.EVM): void
    local is_ctrl_down: boolean = rl.isKeyDown(rl.keyboardKey.LEFT_CONTROL) or rl.isKeyDown(rl.keyboardKey.RIGHT_CONTROL)

    if is_ctrl_down then
        if rl.isKeyPressed(rl.keyboardKey.LEFT) then
            sm.queued_state = StateID.TEXTURE
        elseif rl.isKeyPressed(rl.keyboardKey.RIGHT) then
            sm.queued_state = StateID.TRACKER
        elseif rl.isKeyPressed(rl.keyboardKey.R) then
            if vm:compile() then
                vm:resetVM(true)
                
                if vm:callHook(e3d.Hook.INIT) then
                    sm.queued_state = StateID.RUN -- switch to run state next frame
                else
                    io.printf(vm.error)
                end
            else
                io.printf(vm.error)
            end
        end
    end

    --[[
    if rl.isKeyPressed(rl.keyboardKey.B) then
        if vm.bytecode_len > 0 then
            vm:dumpBytecode()
        else
            print("ERROR: no bytecode to dump")
        end
    elseif rl.isKeyPressed(rl.keyboardKey.P) then
        io.printf('HEAP:    0x%08X - 0x%08X\n', e3d.HEAP_START_ADDR, e3d.HEAP_MAX_ADDR)
        io.printf('TEXMEM:  0x%08X - 0x%08X\n', e3d.TEXMEM_START_ADDR, e3d.TEXMEM_MAX_ADDR)
        io.printf('OBJMEM:  0x%08X - 0x%08X\n', e3d.OBJMEM_START_ADDR, e3d.OBJMEM_MAX_ADDR)
        io.printf('AOBMEM:  0x%08X - 0x%08X\n', e3d.AOBMEM_START_ADDR, e3d.AOBMEM_MAX_ADDR)
        io.printf('SYSMEM:  0x%08X - 0x%08X\n', e3d.SYSMEM_START_ADDR, e3d.SYSMEM_MAX_ADDR)
        io.printf('WAVMEM:  0x%08X - 0x%08X\n', e3d.WAVMEM_START_ADDR, e3d.WAVMEM_MAX_ADDR)
        io.printf('SEQMEM:  0x%08X - 0x%08X\n', e3d.SEQMEM_START_ADDR, e3d.SEQMEM_MAX_ADDR)
        io.printf('GLOBALS: 0x%08X - 0x%08X\n', e3d.GLOBALS_START_ADDR, e3d.GLOBALS_MAX_ADDR)
        io.printf('LOCALS:  0x%08X - 0x%08X\n', e3d.LOCALS_START_ADDR, e3d.LOCALS_MAX_ADDR)
        io.printf('ARGS:    0x%08X - 0x%08X\n', e3d.ARGS_START_ADDR, e3d.ARGS_MAX_ADDR)
        io.printf('TEXBANK: 0x%08X - 0x%08X\n', e3d.TEXBANK_START_ADDR, e3d.TEXBANK_MAX_ADDR)
        io.printf('OBJBANK: 0x%08X - 0x%08X\n', e3d.OBJBANK_START_ADDR, e3d.OBJBANK_MAX_ADDR)
        io.printf('OMPBANK: 0x%08X - 0x%08X\n', e3d.OMPBANK_START_ADDR, e3d.OMPBANK_MAX_ADDR)
        io.printf('WMPBANK: 0x%08X - 0x%08X\n', e3d.WMPBANK_START_ADDR, e3d.WMPBANK_MAX_ADDR)
        io.printf('WAVBANK: 0x%08X - 0x%08X\n', e3d.WAVBANK_START_ADDR, e3d.WAVBANK_MAX_ADDR)
        io.printf('SEQBANK: 0x%08X - 0x%08X\n', e3d.SEQBANK_START_ADDR, e3d.SEQBANK_MAX_ADDR)
        io.printf('ROM:     0x%08X - 0x%08X\n', e3d.ROM_START_ADDR, e3d.ROM_MAX_ADDR)
        io.printf('MEMCARD: 0x%08X - 0x%08X\n', e3d.MEMCARD_START_ADDR, e3d.MEMCARD_MAX_ADDR)
    elseif rl.isKeyPressed(rl.keyboardKey.S) and is_ctrl_down then
        if vm:saveCart(arg[2]) then
            print("cart saved!")
        else
            io.printf(vm.error)
        end
    elseif rl.isKeyPressed(rl.keyboardKey.O) then
        if is_ctrl_down then
            if vm:loadCart(arg[1]) then
                print("cart loaded!")
            else
                io.printf(vm.error)
            end
        else
            if vm:loadData(arg[3], arg[4]) then
                print("data loaded!")
            else
                io.printf(vm.error)
            end
        end
    end
    ]]
end

global function stateMainDraw(sm: *StateMachine, vm: *e3d.EVM): void
    rl.clearBackground({0, 0, 0, 0})
    vm.gpu:camera2D(-1)

    vm.gpu:print2D(GPU_VSCREEN_HALF_W - (25 * 6) /// 2, GPU_VSCREEN_HALF_H - 9, GPU_WHITE, "WELCOME TO ERA-3D v0.0.0!")
    vm.gpu:print2D(GPU_VSCREEN_HALF_W - (33 * 6) /// 2, GPU_VSCREEN_HALF_H +  9, GPU_GRAY, "[CTRL+LEFT/RIGHT]: NAVIGATE MENUS")
    vm.gpu:print2D(GPU_VSCREEN_HALF_W - (33 * 6) /// 2, GPU_VSCREEN_HALF_H + 18, GPU_GRAY, "[CTRL+R]         : RUN CART")
    vm.gpu:print2D(GPU_VSCREEN_HALF_W - (33 * 6) /// 2, GPU_VSCREEN_HALF_H + 27, GPU_GRAY, "[CTRL+O]         : OPEN CART")
    vm.gpu:print2D(GPU_VSCREEN_HALF_W - (33 * 6) /// 2, GPU_VSCREEN_HALF_H + 36, GPU_GRAY, "[CTRL+S]         : SAVE CART")
end
