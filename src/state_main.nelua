require("arg")
require("statemachine")

global function stateMainInit(sm: *StateMachine, vm: *e3d.EVM): void
end

global function stateMainEnter(sm: *StateMachine, vm: *e3d.EVM): void
end

global function stateMainExit(sm: *StateMachine, vm: *e3d.EVM): void
end

global function stateMainUpdate(sm: *StateMachine, vm: *e3d.EVM): void
    local is_ctrl_down: boolean = rl.isKeyDown(rl.keyboardKey.LEFT_CONTROL) or rl.isKeyDown(rl.keyboardKey.RIGHT_CONTROL)

    if rl.isKeyPressed(rl.keyboardKey.B) then
        if vm.bytecode_len > 0 then
            vm:dumpBytecode()
        else
            print("ERROR: no bytecode to dump")
        end
    elseif rl.isKeyPressed(rl.keyboardKey.R) and is_ctrl_down then
        if vm:compile() then
            vm:resetVM(true)
            
            if vm:callHook(e3d.Hook.INIT) then
                sm.queued_state = StateID.RUN -- switch to run state next frame
            else
                io.printf(vm.error)
            end
        else
            io.printf(vm.error)
        end
    elseif rl.isKeyPressed(rl.keyboardKey.M) then
        sm.queued_state = StateID.TRACKER -- switch to tracker state next frame
    elseif rl.isKeyPressed(rl.keyboardKey.P) then
        io.printf('HEAP:    0x%08X - 0x%08X\n', e3d.HEAP_START_ADDR, e3d.HEAP_MAX_ADDR)
        io.printf('TEXMEM:  0x%08X - 0x%08X\n', e3d.TEXMEM_START_ADDR, e3d.TEXMEM_MAX_ADDR)
        io.printf('OBJMEM:  0x%08X - 0x%08X\n', e3d.OBJMEM_START_ADDR, e3d.OBJMEM_MAX_ADDR)
        io.printf('AOBMEM:  0x%08X - 0x%08X\n', e3d.AOBMEM_START_ADDR, e3d.AOBMEM_MAX_ADDR)
        io.printf('SYSMEM:  0x%08X - 0x%08X\n', e3d.SYSMEM_START_ADDR, e3d.SYSMEM_MAX_ADDR)
        io.printf('WAVMEM:  0x%08X - 0x%08X\n', e3d.WAVMEM_START_ADDR, e3d.WAVMEM_MAX_ADDR)
        io.printf('SEQMEM:  0x%08X - 0x%08X\n', e3d.SEQMEM_START_ADDR, e3d.SEQMEM_MAX_ADDR)
        io.printf('GLOBALS: 0x%08X - 0x%08X\n', e3d.GLOBALS_START_ADDR, e3d.GLOBALS_MAX_ADDR)
        io.printf('LOCALS:  0x%08X - 0x%08X\n', e3d.LOCALS_START_ADDR, e3d.LOCALS_MAX_ADDR)
        io.printf('ARGS:    0x%08X - 0x%08X\n', e3d.ARGS_START_ADDR, e3d.ARGS_MAX_ADDR)
        io.printf('TEXBANK: 0x%08X - 0x%08X\n', e3d.TEXBANK_START_ADDR, e3d.TEXBANK_MAX_ADDR)
        io.printf('OBJBANK: 0x%08X - 0x%08X\n', e3d.OBJBANK_START_ADDR, e3d.OBJBANK_MAX_ADDR)
        io.printf('WAVBANK: 0x%08X - 0x%08X\n', e3d.WAVBANK_START_ADDR, e3d.WAVBANK_MAX_ADDR)
        io.printf('SEQBANK: 0x%08X - 0x%08X\n', e3d.SEQBANK_START_ADDR, e3d.SEQBANK_MAX_ADDR)
        io.printf('ROM:     0x%08X - 0x%08X\n', e3d.ROM_START_ADDR, e3d.ROM_MAX_ADDR)
        io.printf('MEMCARD: 0x%08X - 0x%08X\n', e3d.MEMCARD_START_ADDR, e3d.MEMCARD_MAX_ADDR)
    elseif rl.isKeyPressed(rl.keyboardKey.S) and is_ctrl_down then
        vm:saveCart(arg[2],
            function(vm: *e3d.EVM, success: boolean): void
                if success then
                    print("save OK!")
                else
                    io.printf(vm.error)
                end
            end
        )
    elseif rl.isKeyPressed(rl.keyboardKey.O) then
        if is_ctrl_down then
            vm:loadCart(arg[1],
                function(vm: *e3d.EVM, success: boolean): void
                    if success then
                        print("load OK!")
                    else
                        io.printf(vm.error)
                    end
                end
            )
        else
            if vm:loadData(arg[3], arg[4]) then
                print("load OK!")
            else
                io.printf(vm.error)
            end
        end
    end
end

global function stateMainDraw(sm: *StateMachine, vm: *e3d.EVM): void
    vm.gpu:clear(GPU_BLACK)
    
    vm.gpu:camera2D(0)
    vm.gpu:print2D(6, 10, GPU_RED, "MAIN")
    vm.gpu:print2D(6, 20, GPU_WHITE, "PRESS [CTRL+R] TO COMPILE AND RUN")
    vm.gpu:print2D(6, 30, GPU_WHITE, "PRESS [B] TO DUMP BYTECODE")
    vm.gpu:print2D(6, 40, GPU_WHITE, "PRESS [M] TO SWITCH TO TRACKER")
    vm.gpu:print2D(6, 50, GPU_WHITE, "PRESS [P] TO PRINT MEMORY MAP")
    vm.gpu:print2D(6, 60, GPU_WHITE, "PRESS [CTRL+S] TO SAVE CART")
    vm.gpu:print2D(6, 70, GPU_WHITE, "PRESS [CTRL+O] TO LOAD CART")
    vm.gpu:print2D(6, 80, GPU_WHITE, "PRESS [O] TO LOAD ASSETS")
end
