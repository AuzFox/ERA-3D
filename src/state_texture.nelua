require("statemachine")

local CANVAS_X <comptime> = 192
local CANVAS_Y <comptime> = 9 + 14
local CANVAS_W <comptime> = GPU_VSCREEN_W - CANVAS_X
local CANVAS_H <comptime> = GPU_VSCREEN_H - CANVAS_Y - 14
local TEXBANK_LIST_Y <comptime> = 11
local COORDS_X <comptime> = CANVAS_X + 6
local COORDS_Y <comptime> = CANVAS_Y + CANVAS_H + 4
local TOOL_LIST_X <comptime> = CANVAS_X + 2
local TOOL_LIST_Y <comptime> = 11
local PALETTE_Y <comptime> = 218

local ToolType = @enum {
    PENCIL = 0,
    LINE,
    RECT,
    ELIPSE,
    BUCKET,
    SELECT,
}

local load_image_filters: []cstring = {
    "*.png"
}

local canvas: gui.TextureView = {
    x = CANVAS_X,
    y = CANVAS_Y,
    width = CANVAS_W,
    height = CANVAS_H,
    texture = {0, CANVAS_X, CANVAS_Y, 1024, 1024},
    zoom_level = 0,
    pixel_size = 1
}
local primary_colorbox: gui.ColorBox = {
    66,
    128,
    CANVAS_X - 69,
    16,
    color = GPU_BLACK
}
local secondary_colorbox: gui.ColorBox = {
    66,
    150,
    CANVAS_X - 69,
    16,
    color = 0
}

local mouse_in_texbank_list: boolean
local mouse_in_tool_list: boolean
local mouse_in_color_palette: boolean
local current_tool: integer = ToolType.PENCIL

local function canvas_input_callback(): void
    if (not canvas.mouse_in_bounds) or canvas.panning then
        return
    end

    if input.left_click_held then
        if input.is_alt_down then
            primary_colorbox.color = gpu:getPixel(canvas.pixel_x, canvas.pixel_y)
        else
            gpu:pixelLine(
                canvas.prev_pixel_x,
                canvas.prev_pixel_y,
                canvas.pixel_x,
                canvas.pixel_y,
                primary_colorbox.color
            )
        end
    elseif input.right_click_held then
        if input.is_alt_down then
            secondary_colorbox.color = gpu:getPixel(canvas.pixel_x, canvas.pixel_y)
        else
            gpu:pixelLine(
                canvas.prev_pixel_x,
                canvas.prev_pixel_y,
                canvas.pixel_x,
                canvas.pixel_y,
                secondary_colorbox.color
            )
        end
    end
end

local function drawCoords(): void
    gpu:printCString2D(
        COORDS_X,
        COORDS_Y,
        GPU_GREEN,
        rl.textFormat(
            "X:%-4d Y:%-4d",
            (@cint)(canvas.pixel_x),
            (@cint)(canvas.pixel_y)
        )
    )
end

global function stateTextureInit(): void
    canvas.texture.id = gpu.gfx_texture.id
    canvas.input_callback = canvas_input_callback
end

global function stateTextureEnter(): void
    gpu:setRenderTexture(RenderTexture.TEXTURE)
end

global function stateTextureExit(): void
end

global function stateTextureUpdate(): void
    if input.is_ctrl_down and rl.isKeyPressed(rl.keyboardKey.I) then
        local image_load_path: cstring = tinyfd.openFileDialog(
			"Load Image",
			core.user_directory,
			#load_image_filters,
			&load_image_filters,
			nilptr,
			false
		)

		if image_load_path ~= nilptr then
			core.image_to_import = rl.loadImage(image_load_path)

            if not rl.isImageValid(core.image_to_import) then
                core:log(LogEntryType.HOST_ERROR, "failed to open image file", true)
                return
            end

            if core.image_to_import.width > 4096 or core.image_to_import.height > 4096 then
                core:log(LogEntryType.HOST_ERROR, "failed to load image: image is too large", true)
                rl.unloadImage(core.image_to_import)
                core.has_loaded_image = false
                return
            end

            core.has_loaded_image = true

            if core.image_to_import.format ~= rl.pixelFormat.UNCOMPRESSED_R8G8B8A8 then
                rl.imageFormat(&core.image_to_import, rl.pixelFormat.UNCOMPRESSED_R8G8B8A8)
            end

            -- load image to import as texture
            core.import_texture = rl.loadTextureFromImage(core.image_to_import)

            if not rl.isTextureValid(core.import_texture) then
                core:log(LogEntryType.HOST_ERROR, "failed to load image: could not upload to GPU", true)
                rl.unloadImage(core.image_to_import)
                core.has_loaded_image = false
                return
            end

            core.has_import_texture = true
            statemachine.queued_dialog = DialogID.IMAGE_CONFIG
		end

        return
    end

    mouse_in_texbank_list = input.isMouseInRect(60, TEXBANK_LIST_Y, 48, 9)
    mouse_in_tool_list = input.isMouseInRect(6, TOOL_LIST_Y, 48, 36)
    mouse_in_color_palette = input.isMouseInRect(6, PALETTE_Y, 96, 18)

    if rl.isKeyPressed(rl.keyboardKey.X) then
        primary_colorbox.color, secondary_colorbox.color = secondary_colorbox.color, primary_colorbox.color
    end

    if mouse_in_texbank_list then
        if input.left_clicked then
            gpu:setBankPointers(
                GPUBank.TEXBANK0 + ((input.mouse_x - 60) /// 12),
                gpu.current_objbank
            )
            gpu.update_tex = true
        end
    elseif mouse_in_color_palette then
        -- copy color from palette
        if input.left_clicked then
            local x: int32 = (input.mouse_x - 6) /// 12
            local y: int32 = (input.mouse_y - PALETTE_Y) /// 9
            local index: int32 = y * 8 + x
            primary_colorbox.color = GPU_PALETTE[index]
        elseif input.right_clicked then
            local x: int32 = (input.mouse_x - 6) /// 12
            local y: int32 = (input.mouse_y - PALETTE_Y) /// 9
            local index: int32 = y * 8 + x
            secondary_colorbox.color = GPU_PALETTE[index]
        end
    end

    gui.updateColorBox(&primary_colorbox)
    gui.updateColorBox(&secondary_colorbox)

    gui.updateTextureView(&canvas)
end

global function stateTextureDraw(): void
    gpu:colorMask(GPU_COLOR_MASK_A)
	gpu:clearColor(0)
	gpu:clear(GPU_CLEAR_ALL)
	gpu:colorMask(GPU_COLOR_MASK_ALL)
    gpu:camera2D(-1)

    -- top panel
    gpu:drawRect2D(CANVAS_X, 9, CANVAS_W, 13, GPU_ALPHA_DGRAY)
    
    -- left panel
    gpu:drawRect2D(CANVAS_X - 1, 9, 1, GPU_VSCREEN_H, GPU_GRAY)
    gpu:drawRect2D(0, 9, CANVAS_X - 1, GPU_VSCREEN_H, GPU_ALPHA_DGRAY)
    gpu:drawRect2D(0, CANVAS_Y - 1, GPU_VSCREEN_W, 1, GPU_GRAY)
    
    -- bottom panel
    gpu:drawRect2D(CANVAS_X, CANVAS_Y + CANVAS_H, CANVAS_W, 1, GPU_GRAY)
    gpu:drawRect2D(CANVAS_X, CANVAS_Y + CANVAS_H + 1, CANVAS_W, 18, GPU_ALPHA_DGRAY)
    
    gui.drawTextureView(&canvas)

    -- TEXBANK
    local text_y: int32 = TEXBANK_LIST_Y
    gpu:print2D(6, text_y, GPU_WHITE, "TEXBANK:")
    local bank_x: int32 = 60
    for i = 0, <= 3 do
        if i + 1 == gpu.current_texbank then
            gpu:drawRect2D(bank_x, text_y, 12, 9, GPU_ALPHA_GRAY)
            gpu:printHexNibble2D(bank_x + 3, text_y, core.cursor_color, i)
        else
            gpu:printHexNibble2D(bank_x + 3, text_y, GPU_LGRAY, i)
        end
        bank_x = bank_x + 12
    end
    text_y = text_y + 9
    
    gpu:print2D(6, primary_colorbox.y + 4, GPU_WHITE, "PRIMARY  :")
    gui.drawColorBox(&primary_colorbox)

    gpu:print2D(6, secondary_colorbox.y + 4, GPU_WHITE, "SECONDARY:")
    gui.drawColorBox(&secondary_colorbox)
    
    if canvas.mouse_in_bounds then
        drawCoords()
    end

    -- tool list
    for i = 0, < 6 do
        gpu:drawIcon2D(TOOL_LIST_X + (i * 12), TOOL_LIST_Y, i == current_tool and core.cursor_color or GPU_LGRAY, Icon.TOOL_PENCIL + i)
    end
    
    -- color palette
    local palette_y: int32 = PALETTE_Y
    for i = 0, < #GPU_PALETTE do
        local clamped_i: int32 = i % 8
        local x: int32 = 6 + (clamped_i * 12)
        
        gpu:drawRect2D(x, palette_y, 12, 9, GPU_PALETTE[i])

        if i ~= 0 and clamped_i == 7 then
            palette_y = palette_y + 9
        end
    end
end

global function stateTextureCleanup(): void
end
