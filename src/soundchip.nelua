require("blipkit")

require("definitions")

function SoundChip:getTrackState(id: uinteger): *TrackState
    return (@*TrackState)(&self.track_state[id * #TrackState])
end

function SoundChip:getPattern(id: uinteger): *[0]uint8
    return (@*[0]uint8)(&self.pattern_data[id * SOUNDCHIP_PATTERN_SIZE])
end

function SoundChip:getPatternRow(id: uinteger, row: uinteger): *[0]uint8
    return (@*[0]uint8)(&self.pattern_data[(id * SOUNDCHIP_PATTERN_SIZE) + (row * SOUNDCHIP_PATTERN_ROW_SIZE)])
end

function SoundChip:getInstrument(id: uinteger): *[0]uint8
    return (@*[0]uint8)(&self.instrument_data[id * SOUNDCHIP_INSTRUMENT_SIZE])
end

function SoundChip:getWavMapEntryValues(id: uint32): (uint32, uint32, uint32, uint32)
	local entry_ptr: *[0]uint8 = (@*[0]uint8)(&self.sysmem_ptr[(84 + (MEMORY_OBJMAP_SIZE)) + (id * 16)])
	local start: uint32 = ((@uint32)(entry_ptr[0]) << 24) | ((@uint32)(entry_ptr[1]) << 16) | ((@uint32)(entry_ptr[2]) << 8) | (@uint32)(entry_ptr[3])
	local send: uint32 = ((@uint32)(entry_ptr[4]) << 24) | ((@uint32)(entry_ptr[5]) << 16) | ((@uint32)(entry_ptr[6]) << 8) | (@uint32)(entry_ptr[7])
	local susstart: uint32 = ((@uint32)(entry_ptr[8]) << 24) | ((@uint32)(entry_ptr[9]) << 16) | ((@uint32)(entry_ptr[10]) << 8) | (@uint32)(entry_ptr[11])
	local susend: uint32 = ((@uint32)(entry_ptr[12]) << 24) | ((@uint32)(entry_ptr[13]) << 16) | ((@uint32)(entry_ptr[14]) << 8) | (@uint32)(entry_ptr[15])

	return start, send, susstart, susend
end

function SoundChip:setBPM(): void
end

function SoundChip:setInstrument(track: uint8, instrument: uint8): void
	local idata: *[0]uint8 = self:getInstrument(instrument)
	local flags: uint8 = idata[0]
	local sample_start: uint32 = ((@uint32)(idata[1]) << 16) | ((@uint32)(idata[2]) << 8) | (@uint32)(idata[3])
	local sample_end: uint32 = ((@uint32)(idata[4]) << 16) | ((@uint32)(idata[5]) << 8) | (@uint32)(idata[6])
	local sustain_start: uint32 = ((@uint32)(idata[7]) << 16) | ((@uint32)(idata[8]) << 8) | (@uint32)(idata[9])
	local sustain_end: uint32 = ((@uint32)(idata[10]) << 16) | ((@uint32)(idata[11]) << 8) | (@uint32)(idata[12])
	local attack: uint8 = idata[13]
	local decay: uint8 = idata[14]
	local sustain: uint8 = idata[15]
	local release: uint8 = idata[16]

	local bk_track_ptr: *BKTrack
	local bk_instr_ptr: *BKInstrument

	if track == SOUNDCHIP_EMPTY_VALUE then
		bk_track_ptr = &self.preview_bk_track
		bk_instr_ptr = &self.preview_bk_instrument
	else
		local tc: *TrackContext = &self.track_contexts[track]
		bk_track_ptr = &tc.bk_track
		bk_instr_ptr = &tc.bk_instrument
	end
	
	if flags & InstrumentFlag.MANUAL == 0 then
		sample_start, sample_end, sustain_start, sustain_end = self:getWavMapEntryValues(sample_start)
	end
	
	local range: [2]BKInt = {sample_start, sample_end}
	BKSetPtr(bk_track_ptr, BK_SAMPLE_RANGE, &range, #BKInt * 2)

	switch flags & InstrumentFlag.LOOP_MASK do
		case InstrumentFlag.LOOP_OFF then
			BKSetAttr(bk_track_ptr, BK_SAMPLE_REPEAT, BK_NO_REPEAT)
		case InstrumentFlag.LOOP_FORWARD then
			BKSetAttr(bk_track_ptr, BK_SAMPLE_REPEAT, BK_REPEAT)
		case InstrumentFlag.LOOP_PINGPONG then
			BKSetAttr(bk_track_ptr, BK_SAMPLE_REPEAT, BK_PALINDROME)
		case InstrumentFlag.LOOP_RANGE then
			range[0] = sustain_start
			range[1] = sustain_end
			BKSetPtr(bk_track_ptr, BK_SAMPLE_SUSTAIN_RANGE, &range, #BKInt * 2)
	end

	local percentage: float32 = (@float32)(sustain) / 255.0
	local value: BKInt = (@BKInt)(percentage * (@float32)(BK_MAX_VOLUME))
	BKInstrumentSetEnvelopeADSR(bk_instr_ptr, attack, decay, value, release)
end

function SoundChip:stopPreviewNote(note: uint8): void
	BKSetAttr(&self.preview_bk_track, BK_NOTE, BK_NOTE_MUTE)
end

function SoundChip:playPreviewNote(note: uint8, volume: uint8, instrument: uint8): void
	if instrument ~= SOUNDCHIP_EMPTY_VALUE then
		BKSetAttr(&self.preview_bk_track, BK_NOTE, BK_NOTE_MUTE)
		self:setInstrument(SOUNDCHIP_EMPTY_VALUE, instrument)
	else
		self:stopPreviewNote()
		return
	end

	if volume ~= SOUNDCHIP_EMPTY_VALUE then
		local percentage: float32 = (@float32)(volume) / 254.0
		local value: BKInt = (@BKInt)(percentage * (@float32)(BK_MAX_VOLUME))
		BKSetAttr(&self.preview_bk_track, BK_VOLUME, value) -- note volume
	else
		self:stopPreviewNote()
		return
	end

	if note ~= SOUNDCHIP_EMPTY_VALUE then
		local bknote: BKInt
		if note == SOUNDCHIP_NOTE_MUTE then
			bknote = BK_NOTE_MUTE
		elseif note == SOUNDCHIP_NOTE_RELEASE then
			bknote = BK_NOTE_RELEASE
		else
			bknote = (@BKInt)(note) * BK_FINT20_UNIT
		end

		BKSetAttr(&self.preview_bk_track, BK_NOTE, bknote)
	else
		self:stopPreviewNote()
		return
	end
end

function SoundChip:stopTrack(track: uint8): void
	local tc: *TrackContext = &self.track_contexts[track]
	self.audio_state.playing_flags = self.audio_state.playing_flags & ~(0x80 >> track)
	BKSetAttr(&tc.bk_track, BK_NOTE, BK_NOTE_MUTE)
end

local function trackCallback(info: *BKCallbackInfo, userdata: pointer): BKEnum
	local tc: *TrackContext = (@*TrackContext)(userdata)
	local sc: *SoundChip = tc.soundchip
	local track_index: uinteger = tc.track_index
	
	-- is track playing?
	if (sc.audio_state.playing_flags & (0x80 >> track_index)) ~= 0 then
		local state: *TrackState = sc:getTrackState(track_index)

		if (state.playflags & PlayFlag.MUTE) ~= 0 then
			BKSetAttr(&tc.bk_track, BK_MASTER_VOLUME, 0)
		end

		if state.pattern_id == SOUNDCHIP_EMPTY_VALUE then
			sc:stopTrack(track_index)
			return 0
		end

		local playmode: uint8 = state.playflags & PlayFlag.PLAY_MASK

		if playmode >= PlayFlag.PLAY_SAMPLE then
			return 0
		end
		
		state.pattern_pos = math.min(63, state.pattern_pos)

		local pattern_row: *[0]uint8 = sc:getPatternRow(state.pattern_id, state.pattern_pos)

		local note: uint8 = pattern_row[0]
		local volume: uint8 = pattern_row[1]
		local instrument: uint8 = pattern_row[2]
		local pan: uint8 = pattern_row[3]

		if instrument ~= SOUNDCHIP_EMPTY_VALUE then
			BKSetAttr(&tc.bk_track, BK_NOTE, BK_NOTE_MUTE)
			sc:setInstrument(track_index, instrument)
		end

		if volume ~= SOUNDCHIP_EMPTY_VALUE then
			local percentage: float32 = (@float32)(volume) / 254.0
			local value: BKInt = (@BKInt)(percentage * (@float32)(BK_MAX_VOLUME))
			BKSetAttr(&tc.bk_track, BK_VOLUME, value) -- note volume
		end

		if note ~= SOUNDCHIP_EMPTY_VALUE then
			local bknote: BKInt
			if note == SOUNDCHIP_NOTE_MUTE then
				bknote = BK_NOTE_MUTE
			elseif note == SOUNDCHIP_NOTE_RELEASE then
				bknote = BK_NOTE_RELEASE
			else
				bknote = (@BKInt)(note) * BK_FINT20_UNIT
			end

			BKSetAttr(&tc.bk_track, BK_NOTE, bknote)
		end

		state.pattern_pos = state.pattern_pos + 1
		if state.pattern_pos > 63 then
			state.pattern_pos = 0

			if playmode == PlayFlag.PLAY_PATTERN then
				if (state.playflags & PlayFlag.LOOP) == 0 then
					sc:stopTrack(track_index)
				end
				return 0	
			end

			state.song_pos = state.song_pos + 1

			state.pattern_id = sc.song_data[(@uint8)(state.song_pos * 8 + track_index)]
			if state.pattern_id == SOUNDCHIP_EMPTY_VALUE then
				if (state.playflags & PlayFlag.LOOP) ~= 0 then
					-- TODO: search upward for first empty song row for track,
					--       play from the song row after that
					sc:stopTrack(track_index)
				else
					sc:stopTrack(track_index)
				end
			end
		end
	else
		BKSetAttr(&tc.bk_track, BK_NOTE, BK_NOTE_MUTE)
	end

	return 0
end

function SoundChip:stopAllTracks(): void
	for i = 0, < SOUNDCHIP_TRACK_COUNT do
		self:stopTrack(i)
	end

	self:stopPreviewNote()
end

function SoundChip:playTrack(track: uint8, song_row: uint8): void
	local state: *TrackState = self:getTrackState(track)
	local pattern_id: uint8 = self.song_data[((@uinteger)(song_row) * 8) + track]

	if pattern_id == SOUNDCHIP_EMPTY_VALUE then
		self:stopTrack(track)
	else
		self.audio_state.playing_flags = self.audio_state.playing_flags | (0x80 >> track)
		state.playflags = PlayFlag.PLAY_SONG
		state.song_pos = song_row
		state.pattern_id = pattern_id
		state.pattern_pos = 0
	end
end

function SoundChip:playSongRow(song_row: uint8): void
	for i = 0, < SOUNDCHIP_TRACK_COUNT do
		self:playTrack(i, song_row)
	end
end

function SoundChip:playPattern(track: uint8, pattern: uint8): void
	if pattern == SOUNDCHIP_EMPTY_VALUE then
		self:stopTrack(track)
	else
		self.audio_state.playing_flags = self.audio_state.playing_flags | (0x80 >> track)
		local state: *TrackState = self:getTrackState(track)

		state.playflags = PlayFlag.PLAY_PATTERN
		state.pattern_id = pattern
		state.pattern_pos = 0
	end
end

function SoundChip:playWavEx(track: uint8, start: uint32, send: uint32, note: uint8, volume: uint8, flags: uint8): void
	local tc: *TrackContext = &self.track_contexts[track]
	local state: *TrackState = self:getTrackState(track)
	
	local range: [2]BKInt = {start, send}
	BKSetPtr(&tc.bk_track, BK_SAMPLE_RANGE, &range, #BKInt * 2)

	switch flags & InstrumentFlag.LOOP_MASK do
		case InstrumentFlag.LOOP_OFF then
			BKSetAttr(&tc.bk_track, BK_SAMPLE_REPEAT, BK_NO_REPEAT)
		case InstrumentFlag.LOOP_FORWARD then
			BKSetAttr(&tc.bk_track, BK_SAMPLE_REPEAT, BK_REPEAT)
		case InstrumentFlag.LOOP_PINGPONG then
			BKSetAttr(&tc.bk_track, BK_SAMPLE_REPEAT, BK_PALINDROME)
		case InstrumentFlag.LOOP_RANGE then
			BKSetAttr(&tc.bk_track, BK_SAMPLE_REPEAT, BK_NO_REPEAT)
			--range[0] = sustain_start
			--range[1] = sustain_end
			--BKSetPtr(&tc.bk_track, BK_SAMPLE_SUSTAIN_RANGE, &range, #BKInt * 2)
	end
	
	BKInstrumentSetEnvelopeADSR(&tc.bk_instrument, 0, 0, BK_MAX_VOLUME, 4)
		
	BKSetAttr(&tc.bk_track, BK_MASTER_VOLUME, BK_MAX_VOLUME /// 4)
	if volume ~= SOUNDCHIP_EMPTY_VALUE then
		local percentage: float32 = (@float32)(volume) / 254.0
		local value: BKInt = (@BKInt)(percentage * (@float32)(BK_MAX_VOLUME))
		BKSetAttr(&tc.bk_track, BK_VOLUME, value)-- note volume
	end

	if note ~= SOUNDCHIP_EMPTY_VALUE then
		local bknote: BKInt
		if note == SOUNDCHIP_NOTE_MUTE then
			bknote = BK_NOTE_MUTE
		elseif note == SOUNDCHIP_NOTE_RELEASE then
			bknote = BK_NOTE_RELEASE
		else
			bknote = (@BKInt)(note) * BK_FINT20_UNIT
		end
		
		BKSetAttr(&tc.bk_track, BK_NOTE, bknote)
	else
		self:stopTrack(track)
		return
	end

	self.audio_state.playing_flags = self.audio_state.playing_flags | (0x80 >> track)
	state.playflags = PlayFlag.PLAY_SAMPLE
end

function SoundChip:playWav(track: uint8, id: uint32, volume: uint8): void
	local sample_start: uint32
	local sample_end: uint32
	local sustain_start: uint32
	local sustain_end: uint32
	sample_start, sample_end, sustain_start, sustain_end = self:getWavMapEntryValues(id)

	self:playWavEx(track, sample_start, sample_end, BK_C_4, volume, 0)
end

function SoundChip:muteTrack(track: uint8): void
	local state: *TrackState = self:getTrackState(track)
	state.playflags = state.playflags | PlayFlag.MUTE
end

function SoundChip:unmuteTrack(track: uint8): void
	local state: *TrackState = self:getTrackState(track)
	state.playflags = state.playflags & ~PlayFlag.MUTE
end

function SoundChip:updateAudio(): void
	if rl.isAudioStreamProcessed(self.audio_stream) then
		BKContextGenerate(&self.bk_context, &self.aobmem[0], SOUNDCHIP_FRAMES_PER_UPDATE)
		rl.updateAudioStream(self.audio_stream, &self.aobmem[0], SOUNDCHIP_FRAMES_PER_UPDATE)
	end
end

local function isLittleEndian(): boolean
	local x: uint32 <volatile> = 0x01234567
	local p: *uint8 = (@*uint8)(&x)
	return $p == 0x67
end

-- custom version of BKDataSetData that doesn't allocate separate storage
local function setBKDataPointer(data: *BKData, frame_data: pointer, data_size: BKUInt, num_channels: BKUInt, params: BKEnum): void
	local num_bits: BKUInt = 16
	local num_frames: BKInt
	local packet_size: BKInt
	local data_size_bits: BKInt = data_size * 8

	if num_bits <= 8 then
		packet_size = (num_bits * num_channels)
	else
		packet_size = (num_bits + 3) /// 4 * 4 * num_channels
	end

	num_frames = data_size_bits /// packet_size * num_channels

	data.frames = (@*BKFrame)(frame_data)
	data.numFrames = num_frames /// num_channels
	data.numChannels = num_channels
	data.numBits = num_bits
end

function SoundChip:setBankPointers(wavbank_index: uint8, seqbank_index: uint8): void
	local wp: pointer

	self.current_wavbank = wavbank_index
	self.current_seqbank = seqbank_index

	if self.current_wavbank == SoundchipBank.SYSTEM then
		wp = &self.wavmem[0]
	else
		local index: uinteger = self.current_wavbank - SoundchipBank.WAVBANK0
		wp = &self.wavbank_ptr[MEMORY_WAVMEM_SIZE_ELEMENTS * index]
	end

	setBKDataPointer(&self.bk_data, wp, MEMORY_WAVMEM_SIZE_BYTES, 2, self.bk_data_flags)
	BKSetAttr(&self.bk_data, BK_SAMPLE_PITCH, 0)

	if self.current_seqbank == SoundchipBank.SYSTEM then
		self.song_data = (@*[0]uint8)(&self.seqmem[0])
		self.pattern_data = (@*[0]uint8)(&self.seqmem[SOUNDCHIP_PATTERN_DATA_START])
		self.instrument_data = (@*[0]uint8)(&self.seqmem[SOUNDCHIP_INSTRUMENT_DATA_START])
		self.groove_data = (@*[0]uint8)(&self.seqmem[SOUNDCHIP_GROOVE_DATA_START])
	else
		local index: uint64 = self.current_seqbank - SoundchipBank.SEQBANK0
		index = index * MEMORY_SEQMEM_SIZE_ELEMENTS
		self.song_data = (@*[0]uint8)(&self.seqbank_ptr[index])
		self.pattern_data = (@*[0]uint8)(&self.seqbank_ptr[index + SOUNDCHIP_PATTERN_DATA_START])
		self.instrument_data = (@*[0]uint8)(&self.seqbank_ptr[index + SOUNDCHIP_INSTRUMENT_DATA_START])
		self.groove_data = (@*[0]uint8)(&self.seqbank_ptr[index + SOUNDCHIP_GROOVE_DATA_START])
	end
end

function SoundChip:loadWavBank(bank: uint8): void
	-- load wavbank
	local src: *[0]BKFrame = &self.wavbank_ptr[MEMORY_WAVMEM_SIZE_ELEMENTS * bank]
	memory.copy(&self.wavmem, src, MEMORY_WAVMEM_SIZE_BYTES)

	-- load wmpbank
	local wavmap_ptr: *[0]uint8 = (@*[0]uint8)(&self.sysmem_ptr[84 + MEMORY_OBJMAP_SIZE])
	local bank_ptr: *[0]uint8 = (@*[0]uint8)(&self.wmpbank_ptr[MEMORY_WAVMAP_SIZE * bank])
	memory.copy(wavmap_ptr, bank_ptr, MEMORY_WAVMAP_SIZE)
end

function SoundChip:loadSeqBank(bank: uint8): void
	local src: *[0]uint8 = &self.seqbank_ptr[MEMORY_SEQMEM_SIZE_ELEMENTS * bank]
	memory.copy(&self.seqmem, src, MEMORY_SEQMEM_SIZE_BYTES)
end

function SoundChip:loadAudioSample(filename: string, bank_index: uint32, start_index: uint32): (boolean, uint32)
	local wave: rl.wave = rl.loadWave(filename)

	if not rl.isWaveReady(wave) then
		return false, 0
	end

	start_index = start_index * 2

	--print(wave.channels, wave.sampleSize, wave.sampleRate, wave.frameCount)

	local frames: *[0]BKFrame = (@*[0]BKFrame)(wave.data)
	local frame_count: uint32

	if wave.channels == 1 then
		for i: uint64 = 0, < wave.frameCount do
			local frame: BKFrame = frames[i]
			self.wavbank_ptr[start_index + (i * 2)] = frame
			self.wavbank_ptr[start_index + (i * 2) + 1] = frame
		end
		frame_count = wave.frameCount
	elseif wave.channels == 2 then
		for i: uint64 = 0, < wave.frameCount * 2 do
			local frame: BKFrame = frames[i]
			self.wavbank_ptr[start_index + i] = frame
		end
		frame_count = wave.frameCount
	end

	rl.unloadWave(wave)

	return true, frame_count
end

function SoundChip:resetSoundchip(): void
	self.audio_state.playing_flags = 0

	for i = 0, < SOUNDCHIP_TRACK_COUNT do
		local tc: *TrackContext = &self.track_contexts[i]
		local state: *TrackState = self:getTrackState(i)
		state.playflags = 0
		state.bpm = 154
		state.volume = 127
		state.pan = 0
		state.song_id = 0
		state.song_pos = 0
		state.pattern_id = 0
		state.pattern_pos = 0
		state.groove_id = 0
		state.groove_pos = 0
		BKSetAttr(&tc.bk_track, BK_NOTE, BK_NOTE_MUTE)
	end

	self:stopPreviewNote()
end

function SoundChip:init(sysmem_ptr: *[0]uint8, wavbank_ptr: *[0]BKFrame, seqbank_ptr: *[0]uint8, wmpbank_ptr: *[0]uint8): void
	self.sysmem_ptr = sysmem_ptr
	self.wmpbank_ptr = wmpbank_ptr
	self.wavbank_ptr = wavbank_ptr
	self.seqbank_ptr = seqbank_ptr

	rl.initAudioDevice()

	rl.setAudioStreamBufferSizeDefault(SOUNDCHIP_FRAMES_PER_UPDATE)

	-- create audio stream (22050hz, 16 bit stereo)
	self.audio_stream = rl.loadAudioStream(SOUNDCHIP_SAMPLE_RATE, 16, 2)

	-- init BlipKit stuff
	BKContextInit(&self.bk_context, 2, SOUNDCHIP_SAMPLE_RATE)

	BKDataInit(&self.bk_data)
	self.bk_data_flags = BK_16_BIT_SIGNED
	if isLittleEndian() then
		self.bk_data_flags = self.bk_data_flags | BK_LITTLE_ENDIAN
	else
		self.bk_data_flags = self.bk_data_flags | BK_BIG_ENDIAN
	end

	self:setBankPointers(
		SoundchipBank.WAVBANK0,
		SoundchipBank.SEQBANK0
	)
	self.audio_state = (@*AudioState)(&self.sysmem_ptr[0])
	self.track_state = (@*[0]uint8)(&self.sysmem_ptr[1])

	local success: boolean
	local i0_start: uint32 = 0
	local i0_count: uint32 = 0
	success, i0_count = self:loadAudioSample("test_data/Control Amen.wav", 0, i0_start)

	for i = 0, < SOUNDCHIP_TRACK_COUNT do
		local tc: *TrackContext = &self.track_contexts[i]

		local callback: BKCallback = {
			func = trackCallback,
			userInfo = tc
		}

		--[[
			openmpt tempo calculations:
			https://wiki.openmpt.org/Manual:_Song_Properties#Modern_Tempo_Mode

			bpm
			rpb (rows per beat)
			tpr (ticks per row)

			ticks per second = (bpm * rpb * tpr) / 60 seconds

			(125 bpm * 4 rpb * 6 tpr) / 60 secs = 50 ticks per second!!! (same as LSDJ)

			set clock to ticks per second, set divider to ticks per row
		]]

		tc.soundchip = self
		tc.track_index = i

		BKClockInit(&tc.bk_clock, BKTimeFromSeconds(&self.bk_context, 1.0 / ((175.0 * 4.0 * 6.0) / 60.0)), nilptr)

		BKTrackInit(&tc.bk_track, BK_SQUARE)
		BKSetAttr(&tc.bk_track, BK_MASTER_VOLUME, BK_MAX_VOLUME /// 4) -- mix volume
		BKSetAttr(&tc.bk_track, BK_VOLUME, BK_MAX_VOLUME /// 4) -- note volume
		BKTrackAttach(&tc.bk_track, &self.bk_context)

		local range: [2]BKInt = {0, 88200}
		BKSetPtr(&tc.bk_track, BK_SAMPLE, &self.bk_data, 0)
		BKSetPtr(&tc.bk_track, BK_SAMPLE_RANGE, &range, #BKInt * 2)
		BKSetAttr(&tc.bk_track, BK_SAMPLE_REPEAT, 1)

		BKInstrumentInit(&tc.bk_instrument)
		BKInstrumentSetEnvelopeADSR(&tc.bk_instrument, 0, 3, BK_MAX_VOLUME, 3)
		BKSetPtr(&tc.bk_track, BK_INSTRUMENT, &tc.bk_instrument, 0)
		
		BKDividerInit(&tc.bk_divider, 6, &callback)
		BKDividerAttachToClock(&tc.bk_divider, &tc.bk_clock)
		BKClockAttach(&tc.bk_clock, &self.bk_context, nilptr)
	end

	BKTrackInit(&self.preview_bk_track, BK_SQUARE)
	BKSetAttr(&self.preview_bk_track, BK_MASTER_VOLUME, BK_MAX_VOLUME // 4) -- mix volume
	BKSetAttr(&self.preview_bk_track, BK_VOLUME, BK_MAX_VOLUME /// 4) -- note volume
	BKTrackAttach(&self.preview_bk_track, &self.bk_context)

	BKSetPtr(&self.preview_bk_track, BK_SAMPLE, &self.bk_data, 0)

	BKInstrumentInit(&self.preview_bk_instrument)
	BKInstrumentSetEnvelopeADSR(&self.preview_bk_instrument, 0, 3, BK_MAX_VOLUME, 3)
	BKSetPtr(&self.preview_bk_track, BK_INSTRUMENT, &self.preview_bk_instrument, 0)

	self:resetSoundchip()

	-- reset seqbanks
	for i = SoundchipBank.SEQBANK0, <= SoundchipBank.SEQBANK7 do
		local index: uint64 = i - SoundchipBank.SEQBANK0
		index = index * MEMORY_SEQMEM_SIZE_BYTES
		local song_data: *[0]uint8 = (@*[0]uint8)(&self.seqbank_ptr[index])
		local pattern_data: *[0]uint8 = (@*[0]uint8)(&self.seqbank_ptr[index + SOUNDCHIP_PATTERN_DATA_START])
		local groove_data: *[0]uint8 = (@*[0]uint8)(&self.seqbank_ptr[index + SOUNDCHIP_GROOVE_DATA_START])

		-- reset song
		memory.set(song_data, SOUNDCHIP_EMPTY_VALUE, SOUNDCHIP_SONG_SIZE)

		-- reset patterns, each pattern row set to all EMPTY
		memory.set(pattern_data, SOUNDCHIP_EMPTY_VALUE, SOUNDCHIP_PATTERN_COUNT * SOUNDCHIP_PATTERN_SIZE)

		-- reset grooves
		memory.set(groove_data, 6, SOUNDCHIP_GROOVE_COUNT * SOUNDCHIP_GROOVE_SIZE)
	end

	local instr0: *[0]uint8 = self:getInstrument(0)

	-- flags
	instr0[0] = InstrumentFlag.LOOP_RANGE | InstrumentFlag.MANUAL
	-- sample start
	instr0[1] = (i0_start >> 16) & 0xFF
	instr0[2] = (i0_start >> 8) & 0xFF
	instr0[3] = (i0_start) & 0xFF
	-- sample end
	instr0[4] = ((i0_start + i0_count) >> 16) & 0xFF
	instr0[5] = ((i0_start + i0_count) >> 8) & 0xFF
	instr0[6] = ((i0_start + i0_count)) & 0xFF
	-- sustain start
	instr0[7] = ((i0_start + (i0_count /// 2)) >> 16) & 0xFF
	instr0[8] = ((i0_start + (i0_count /// 2)) >> 8) & 0xFF
	instr0[9] = ((i0_start + (i0_count /// 2))) & 0xFF
	-- sustain end
	instr0[10] = ((i0_start + (i0_count /// 2) + (i0_count /// 4)) >> 16) & 0xFF
	instr0[11] = ((i0_start + (i0_count /// 2) + (i0_count /// 4)) >> 8) & 0xFF
	instr0[12] = ((i0_start + (i0_count /// 2) + (i0_count /// 4))) & 0xFF
	-- adsr
	instr0[13] = 12
	instr0[14] = 0
	instr0[15] = 255
	instr0[16] = 4
	-- name
	instr0[17] = 'B'_u8
	instr0[18] = 'R'_u8
	instr0[19] = 'K'_u8
	instr0[20] = '('_u8
	instr0[21] = '1'_u8
	instr0[22] = '7'_u8
	instr0[23] = '5'_u8
	instr0[24] = ')'_u8

	rl.playAudioStream(self.audio_stream)
end

function SoundChip:cleanup(): void
	rl.closeAudioDevice()
	rl.unloadAudioStream(self.audio_stream)

	BKDispose(&self.bk_data)
	
	for i = 0, < SOUNDCHIP_TRACK_COUNT do
		local tc: *TrackContext = &self.track_contexts[i]
		
		BKDispose(&tc.bk_instrument)
		BKDispose(&tc.bk_track)
		BKDispose(&tc.bk_divider)
		BKDispose(&tc.bk_clock)
	end
	
	BKDispose(&self.preview_bk_instrument)
	BKDispose(&self.preview_bk_track)
	BKDispose(&self.bk_context)
end
