require("definitions")

global util = @record {}

function util.getIntFloatBtye(array: *[0]IntFloat, segment_start: uint32, addr: uint32): uint8
	return (@uint8)((array[(addr - segment_start) /// 4].u >> (8 * (3 - (addr & 0b11)))) & 0xFF)
end

function util.setIntFloatByte(array: *[0]IntFloat, segment_start: uint32, addr: uint32, val: uint8): void
	local shift: uinteger = 8 * (3 - (addr & 0b11))
	local v: *IntFloat = &array[(addr - segment_start) /// 4]
	v.u = (v.u & (0xFF000000 >> shift)) | (((@uint32)(val) << 24) >> shift)
end

function util.midI(a: int32, b: int32, c: int32): int32
    if b < a then
		local t: int32 = a
		a = b
		b = t
	end
	if c < b then
		local t: int32 = c
		c = b
		b = t
	end
	if b < a then
		local t: int32 = a
		a = b
		b = t
	end

    return b
end

function util.wrapI(x: int32, min: int32, max: int32): int32
    if min == max then
        return min
    elseif min > max then
        min, max = max, min
    end

    -- TODO: code solution for when range is all negative
    if max < 0 then
        -- ???
    end

    local temp: float32 = max - min
    return min + ((temp + ((x - min) %%% temp)) %%% temp)
end

function util.midF(a: float32, b: float32, c: float32): float32
    if b < a then
	    local t: float32 = a
	    a = b
	    b = t
	end
	if c < b then
	    local t: float32 = c
	    c = b
	    b = t
	end
	if b < a then
	    local t: float32 = a
	    a = b
	    b = t
	end
    
    return b
end

function util.wrapF(x: float32, min: float32, max: float32): float32
    if min == max then
        return min
    elseif min > max then
        min, max = max, min
    end

    -- TODO: code solution for when range is all negative
    if max < 0 then
        -- ???
    end

    local temp: float32 = max - min
    return min + ((temp + ((x - min) %%% temp)) %%% temp)
end

-- read float value from pointer in big-endian order
function util.peekF(ptr: *[0]uint8): float32
	local intf: IntFloat
	intf = {
		u =
		((@uint32)(ptr[0]) << 24) |
		((@uint32)(ptr[1]) << 16) |
		((@uint32)(ptr[2]) << 8) |
		((@uint32)(ptr[3]))
	}

	return intf.f
end

-- read uint32 valuefromo pointer in big-endian order
function util.peekU(ptr: *[0]uint8): uint32
	local intf: IntFloat
	intf = {
		u =
		((@uint32)(ptr[0]) << 24) |
		((@uint32)(ptr[1]) << 16) |
		((@uint32)(ptr[2]) << 8) |
		((@uint32)(ptr[3]))
	}

	return intf.u
end

-- read int32 value from pointer in big-endian order
function util.peekI(ptr: *[0]uint8): int32
	local intf: IntFloat
	intf = {
		u =
		((@uint32)(ptr[0]) << 24) |
		((@uint32)(ptr[1]) << 16) |
		((@uint32)(ptr[2]) << 8) |
		((@uint32)(ptr[3]))
	}

	return intf.i
end

-- write float value to pointer in big-endian order
function util.pokeF(ptr: *[0]uint8, x: float32): void
	local intf: IntFloat = {f=x}
	ptr[0] = (@uint8)((intf.u & 0xFF000000) >> 24)
	ptr[1] = (@uint8)((intf.u & 0x00FF0000) >> 16)
	ptr[2] = (@uint8)((intf.u & 0x0000FF00) >> 8)
	ptr[3] = (@uint8)(intf.u & 0x000000FF)
end

-- write uint32 value to pointer in big-endian order
function util.pokeU(ptr: *[0]uint8, x: uint32): void
	ptr[0] = (@uint8)((x & 0xFF000000) >> 24)
	ptr[1] = (@uint8)((x & 0x00FF0000) >> 16)
	ptr[2] = (@uint8)((x & 0x0000FF00) >> 8)
	ptr[3] = (@uint8)(x & 0x000000FF)
end

-- write int32 value to pointer in big-endian order
function util.pokeI(ptr: *[0]uint8, x: int32): void
	local intf: IntFloat = {i=x}
	ptr[0] = (@uint8)((intf.u & 0xFF000000) >> 24)
	ptr[1] = (@uint8)((intf.u & 0x00FF0000) >> 16)
	ptr[2] = (@uint8)((intf.u & 0x0000FF00) >> 8)
	ptr[3] = (@uint8)(intf.u & 0x000000FF)
end

function util.toHSLA(rgba: uint32): (int32, float32, float32, uint32)
	local h: int32
	local s: float32
	local l: float32

	local r: float32 = (@float32)((rgba >> 24) & 0xFF) / 255.0
	local g: float32 = (@float32)((rgba >> 16) & 0xFF) / 255.0
	local b: float32 = (@float32)((rgba >> 8) & 0xFF) / 255.0
	local a: uint32 = rgba & 0xFF

	local min: float32 = math.min(math.min(r, g), b)
	local max: float32 = math.max(math.max(r, g), b)
	local delta: float32 = max - min

	l = (max + min) / 2.0

	if delta == 0.0 then
		return 0, 0.0, l, a
	else
		s = (l <= 0.5) and (delta / (max + min)) or (delta / (2.0 - max - min))

		local hue: float32

		if r == max then
			hue = ((g - b) / 6.0) / delta
		elseif g == max then
			hue = (1.0 / 3.0) + ((b - r) / 6.0) / delta
		else
			hue = (2.0 / 3.0) + ((r - g) / 6.0) / delta
		end

		if hue < 0.0 then
			hue = hue + 1.0
		end
		if hue > 1.0 then
			hue = hue - 1.0
		end

		h = (@int32)(hue * 360.0)
	end

	return h, s, l, a
end

local function hueToRGB(v1: float32, v2: float32, vh: float32): float32
	if vh < 0.0 then
		vh = vh + 1.0
	end

	if vh > 1.0 then
		vh = vh - 1.0
	end

	if (6 * vh) < 1.0 then
		return v1 + (v2 - v1) * 6.0 * vh
	end

	if (2 * vh) < 1.0 then
		return v2
	end

	if (3 * vh) < 2.0 then
		return v1 + (v2 - v1) * ((2.0 / 3.0) - vh) * 6.0
	end

	return v1
end

function util.toRGBA(h: int32, s: float32, l: float32, a: uint32): uint32
	local r: uint32
	local g: uint32
	local b: uint32

	if s == 0.0 then
		r = (@uint32)(l * 255.0) & 0xFF
		g = r
		b = r
	else
		local v1: float32
		local v2: float32
		local hue: float32 = (@float32)(h / 360.0)

		v2 = (l < 0.5) and (l * (1.0 + s)) or ((l + s) - (l * s))
		v1 = 2.0 * l - v2

		r = (@uint32)(255.0 * hueToRGB(v1, v2, hue + (1.0 / 3.0))) & 0xFF
		g = (@uint32)(255.0 * hueToRGB(v1, v2, hue)) & 0xFF
		b = (@uint32)(255.0 * hueToRGB(v1, v2, hue - (1.0 / 3.0))) & 0xFF
	end

	return (r << 24) | (g << 16) | (b << 8) | a
end

-- create a wrapper for mkdir() on linux and _mkdir() on windows
-- taken from fs.nelua from nelua batteries (https://github.com/edubart/nelua-batteries)

## if ccinfo.is_windows then
	local function win_mkdir(path: cstring): cint <cimport'_mkdir',cinclude'<direct.h>'> end
## else
	local S_IRUSR: cuint <cimport,cinclude'<sys/stat.h>',const>
	local S_IWUSR: cuint <cimport,cinclude'<sys/stat.h>',const>
	local S_IXUSR: cuint <cimport,cinclude'<sys/stat.h>',const>
	local S_IRGRP: cuint <cimport,cinclude'<sys/stat.h>',const>
	local S_IWGRP: cuint <cimport,cinclude'<sys/stat.h>',const>
	local S_IXGRP: cuint <cimport,cinclude'<sys/stat.h>',const>
	local S_IROTH: cuint <cimport,cinclude'<sys/stat.h>',const>
	local S_IWOTH: cuint <cimport,cinclude'<sys/stat.h>',const>
	local S_IXOTH: cuint <cimport,cinclude'<sys/stat.h>',const>
	local function linux_mkdir(path: cstring, mode: cuint): cint <cimport 'mkdir',cinclude'<sys/stat.h>'> end
## end

local function strerror(errnum: cint): cstring <cimport,cinclude'<string.h>'> end
local errno: cint <cimport,cinclude'<errno.h>'>

local function result_from_errno(ok: boolean): (boolean, string, integer)
	if not ok then
	  return false, strerror(errno), errno
	end
	return true, (@string){}, 0
  end

function util.mkdir(path: string): (boolean, string, integer)
	## if ccinfo.is_windows then
		return result_from_errno(win_mkdir(path) == 0)
	## else
		local mode: cuint = S_IRUSR | S_IWUSR | S_IXUSR | S_IRGRP | S_IWGRP | S_IXGRP | S_IROTH | S_IXOTH
		return result_from_errno(linux_mkdir(path, mode) == 0)
	## end
end
