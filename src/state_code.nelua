require("statemachine")

-- syntax highlighting variables
local sh_line: sequence(uint8)
local sh_line_index: uint32
local sh_max_line_index: uint32
local sh_char_index: uint32
local sh_token: uint8
local sh_mlcomment_level: uinteger
local sh_token_val: uinteger
local sh_token_valf: float32

local function getChar(): uint8
	if sh_char_index >= #sh_line then
		if sh_line_index < sh_max_line_index then
			sh_token = '\n'_u8
		else
			sh_token = 0
		end
	else
		sh_token = sh_line[sh_char_index]
	end

	return sh_token
end

local function nextToken(vm: *EVM): void
	if sh_mlcomment_level > 0 then
		while true do
			getChar()
			if sh_token == 0 then
				sh_mlcomment_level = 0
				break
			elseif sh_token == '*'_u8 then
				sh_char_index = sh_char_index + 1
				getChar()
				if sh_token == '/'_u8 then
					sh_char_index = sh_char_index + 1
					sh_mlcomment_level = sh_mlcomment_level - 1
					if sh_mlcomment_level == 0 then
						break
					end
				elseif sh_token == '\n'_u8 then
					sh_line_index = sh_line_index + 1
					sh_line = core.src_lines[sh_line_index]
					sh_char_index = 1
				elseif sh_token == 0 then
					sh_mlcomment_level = 0
					break
				end
			elseif sh_token == '/'_u8 then
				sh_char_index = sh_char_index + 1
				getChar()
				if sh_token == '*'_u8 then
					sh_char_index = sh_char_index + 1
					sh_mlcomment_level = sh_mlcomment_level + 1
				elseif sh_token == '\n'_u8 then
					sh_line_index = sh_line_index + 1
					sh_line = core.src_lines[sh_line_index]
					sh_char_index = 1
				elseif sh_token == 0 then
					sh_mlcomment_level = 0
					break
				end
			elseif sh_token == '\n'_u8 then
				sh_line_index = sh_line_index + 1
				sh_line = core.src_lines[sh_line_index]
				sh_char_index = 1
			else
				sh_char_index = sh_char_index + 1
			end
		end

		sh_token = Token.COMMENT
		return
	end

    while getChar() ~= 0 do
		sh_char_index = sh_char_index + 1

		if sh_token == '\n'_u8 then
			sh_line_index = sh_line_index + 1
			sh_line = core.src_lines[sh_line_index]
			sh_char_index = 1
		elseif (sh_token >= 'a'_u8 and sh_token <= 'z'_u8) or (sh_token >= 'A'_u8 and sh_token <= 'Z'_u8) or (sh_token == '_'_u8) then
			-- identifier
			vm.sb:clear()
			vm.sb:writebyte(sh_token)

			while true do
				getChar()
				if (sh_token >= 'a'_u8 and sh_token <= 'z'_u8) or (sh_token >= 'A'_u8 and sh_token <= 'Z'_u8) or (sh_token >= '0'_u8 and sh_token <= '9'_u8) or (sh_token == '_'_u8) then
					sh_char_index = sh_char_index + 1
					vm.sb:writebyte(sh_token)
				else
					break
				end
			end
			
			vm.current_id_name = vm.sb:view()
			vm:lookupID(vm.current_id_name)

			if vm.has_id then
				sh_token = vm.current_id.token
				return
			else
				sh_token = Token.ID
				return
			end
		elseif sh_token >= '0'_u8 and sh_token <= '9'_u8 then
			local isfloat: boolean = false
			-- number
			sh_token_val = sh_token - '0'_u8
			if sh_token_val == 0 and getChar() == 'x'_u8 then
				-- hex
				sh_char_index = sh_char_index + 1
				while true do
					getChar()
					if (sh_token >= '0'_u8 and sh_token <= '9'_u8) or (sh_token >= 'a'_u8 and sh_token <= 'f'_u8) or (sh_token >= 'A'_u8 and sh_token <= 'F'_u8) then
						sh_token_val = sh_token_val * 16 + (sh_token & 15)
						if sh_token >= 'A'_u8 then
							sh_token_val = sh_token_val + 9
						end
						sh_char_index = sh_char_index + 1
					elseif sh_token == '_'_u8 then
						sh_char_index = sh_char_index + 1
					else
						break
					end
				end
			elseif sh_token_val == 0 and getChar() == 'b'_u8 then
				-- binary
				sh_char_index = sh_char_index + 1
				while true do
					getChar()
					if sh_token == '0'_u8 or sh_token == '1'_u8 then
						sh_token_val = (sh_token_val * 2) + (sh_token - '0'_u8)
						sh_char_index = sh_char_index + 1
					elseif sh_token == '_'_u8 then
						sh_char_index = sh_char_index + 1
					else
						break
					end
				end
			else
				-- decimal
				local fract: float32 = 1.0
				while true do
					getChar()
					if sh_token >= '0'_u8 and sh_token <= '9'_u8 then
						if isfloat then
							fract = fract / 10.0
							sh_token_valf = (sh_token_valf * 10) + (@float32)(sh_token - '0'_u8)
						else
							sh_token_val = (sh_token_val * 10) + (sh_token - '0'_u8)
						end
						sh_char_index = sh_char_index + 1
					elseif sh_token == '.'_u8 then
						if not isfloat then
							isfloat = true
							sh_token_valf = (@float32)(sh_token_val)
							sh_char_index = sh_char_index + 1
						end
					elseif sh_token == '_'_u8 then
						sh_char_index = sh_char_index + 1
					else
						if isfloat then
							sh_token_valf = sh_token_valf * fract
						end
						break
					end
				end
			end
			if isfloat then
				sh_token = Token.FLOAT_LITERAL
			else
				sh_token = Token.INT_LITERAL
			end
			return
		elseif sh_token == '"'_u8 or sh_token == '\''_u8 then
			-- string/char literal
			local start: uinteger = sh_token

			while true do
				getChar()
				if sh_token == 0 then
					sh_token = Token.UNKNOWN
					return
				elseif sh_token ~= start then
					sh_token_val = sh_token
					sh_char_index = sh_char_index + 1
					if sh_token == '\\'_u8 then -- escape code
						getChar()
						sh_char_index = sh_char_index + 1
						switch sh_token do
							case '\\'_u8 then -- \\
								sh_token_val = '\\'_u8
							case 'n'_u8 then -- \n
								sh_token_val = '\n'_u8
							else
								-- invalid escape sequence
								sh_token_val = '\\'_u8
						end
					elseif sh_token == '\n'_u8 then
						sh_line_index = sh_line_index + 1
						sh_line = core.src_lines[sh_line_index]
						sh_char_index = 1

						sh_token = Token.UNKNOWN
						return
					end
				else
					break
				end
			end

			sh_char_index = sh_char_index + 1

			if start == '"'_u8 then
				sh_token = Token.STRING_LITERAL
			else
				sh_token = Token.INT_LITERAL
			end

			return
		elseif sh_token == '/'_u8 then
			local nxt: uinteger = getChar()
			switch nxt do
				case '/'_u8 then -- single line comment
					sh_char_index = sh_char_index + 1
					while true do
						getChar()
						if sh_token ~= 0 and sh_token ~= '\n'_u8 then
							sh_char_index = sh_char_index + 1
						else
							break
						end
					end
					
					sh_token = Token.COMMENT
					return
				case '*'_u8 then -- multi-line comment
					sh_mlcomment_level = 1
					sh_char_index = sh_char_index + 1

					while true do
						getChar()
						if sh_token == 0 then
							sh_mlcomment_level = 0
							break
						elseif sh_token == '*'_u8 then
							sh_char_index = sh_char_index + 1
							getChar()
							if sh_token == '/'_u8 then
								sh_char_index = sh_char_index + 1
								sh_mlcomment_level = sh_mlcomment_level - 1
								if sh_mlcomment_level == 0 then
									break
								end
							elseif sh_token == '\n'_u8 then
								sh_line_index = sh_line_index + 1
								sh_line = core.src_lines[sh_line_index]
								sh_char_index = 1
							elseif sh_token == 0 then
								sh_mlcomment_level = 0
								break
							end
						elseif sh_token == '/'_u8 then
							sh_char_index = sh_char_index + 1
							getChar()
							if sh_token == '*'_u8 then
								sh_char_index = sh_char_index + 1
								sh_mlcomment_level = sh_mlcomment_level + 1
							elseif sh_token == '\n'_u8 then
								sh_line_index = sh_line_index + 1
								sh_line = core.src_lines[sh_line_index]
								sh_char_index = 1
							elseif sh_token == 0 then
								sh_mlcomment_level = 0
								break
							end
						elseif sh_token == '\n'_u8 then
							sh_line_index = sh_line_index + 1
							sh_line = core.src_lines[sh_line_index]
							sh_char_index = 1
						else
							sh_char_index = sh_char_index + 1
						end
					end

					sh_token = Token.COMMENT
					return
				else
					sh_token = Token.DIV
					return
			end
		elseif sh_token == '='_u8 then
			if getChar() == '='_u8 then
				sh_char_index = sh_char_index + 1
				sh_token = Token.EQ
			else
				sh_token = Token.ASSIGN
			end
			
			return
		elseif sh_token == '+'_u8 then
			sh_token = Token.ADD
			return
		elseif sh_token == '-'_u8 then
			if getChar() == '>'_u8 then
				sh_char_index = sh_char_index + 1
				sh_token = Token.ARROW
			else
				sh_token = Token.SUB
			end
			
			return
		elseif sh_token == '*'_u8 then
			sh_token = Token.MUL
			return
		elseif sh_token == '!'_u8 then
			if getChar() == '='_u8 then
				sh_char_index = sh_char_index + 1
				sh_token = Token.NE
			else
				sh_token = Token.LNOT
			end
			
			return
		elseif sh_token == '<'_u8 then
			local nxt: uinteger = getChar()
			switch nxt do
				case '='_u8 then
					sh_char_index = sh_char_index + 1
					sh_token = Token.LE
				case '<'_u8 then
					sh_char_index = sh_char_index + 1
					sh_token = Token.LSHIFT
				else
					sh_token = Token.LT
			end
			
			return
		elseif sh_token == '>'_u8 then
			local nxt: uinteger = getChar()
			switch nxt do
				case '='_u8 then
					sh_char_index = sh_char_index + 1
					sh_token = Token.GE
				case '>'_u8 then
					sh_char_index = sh_char_index + 1
					if getChar() == '>'_u8 then
						sh_char_index = sh_char_index + 1
						sh_token = Token.ARSHIFT
					else
						sh_token = Token.RSHIFT
					end
				else
					sh_token = Token.GT
			end
			
			return
		elseif sh_token == '|'_u8 then
			if getChar() == '|'_u8 then
				sh_char_index = sh_char_index + 1
				sh_token = Token.LOR
			else
				sh_token = Token.OR
			end
			
			return
		elseif sh_token == '&'_u8 then
			if getChar() == '&'_u8 then
				sh_char_index = sh_char_index + 1
				sh_token = Token.LAND
			else
				sh_token = Token.AND
			end
			
			return
		elseif sh_token == '^'_u8 then
			sh_token = Token.XOR
			return
		elseif sh_token == '~'_u8 then
			sh_token = Token.NOT
			return
		elseif sh_token == '%'_u8 then
			sh_token = Token.MOD
			return
		elseif sh_token == '['_u8 then
			sh_token = Token.BRAK
			return
		elseif sh_token == '?'_u8 then
			sh_token = Token.COND
			return
		elseif sh_token == '.'_u8 then
			if getChar() == '.'_u8 then
				sh_char_index = sh_char_index + 1
				if getChar() == '.'_u8 then
					sh_char_index = sh_char_index + 1
					sh_token = Token.VARARGS
				else
					sh_token = Token.UNKNOWN
				end
			else
				sh_token = Token.DOT
			end
			
			return
		elseif (sh_token == ';'_u8 or sh_token == '{'_u8 or sh_token == '}'_u8 or sh_token == '('_u8 or sh_token == ')'_u8 or sh_token == ']'_u8 or sh_token == ','_u8 or sh_token == ':'_u8 or sh_token == '`'_u8 or sh_token == '$'_u8 or sh_token == '#'_u8 or sh_token == '@'_u8) then
			return
		end
	end
end

local function isInsideBracketPair(): boolean
	if core.char_index <= 1 or core.char_index >= #core.current_line then
		return false
	end

	local c0: uint8 = core.current_line[core.char_index - 1]
	local c1: uint8 = core.current_line[core.char_index]
	return (c0 == '{'_u8 and c1 == '}'_u8) or
		(c0 == '('_u8 and c1 == ')'_u8) or
		(c0 == '['_u8 and c1 == ']'_u8)
end

local function wouldDoubleCloseBrackets(char_to_type: uint8): boolean
	if core.char_index <= 1 or core.char_index >= #core.current_line then
		return false
	end

	local closing_char: uint8 = core.current_line[core.char_index]
	if closing_char ~= char_to_type then
		return false
	end

	-- scan line up until char index for unclosed brackets of matching type
	local opening_char: uint8
	switch char_to_type do
		case '}'_u8 then
			opening_char = '{'_u8
		case ')'_u8 then
			opening_char = '('_u8
		case ']'_u8 then
			opening_char = '['_u8
	end

	local brace_level: uint32 = 0
	for i = 1, < core.char_index do
		local c: uint8 = core.current_line[i]

		if c == opening_char then
			brace_level = brace_level + 1
		elseif c == closing_char and brace_level > 0 then
			brace_level = brace_level - 1
		end
	end

	return brace_level > 0
end

local function getIndentLevel(): (uint32, uint32)
	local indent_level: uint32 = 0
	local brace_level: uint32 = 0
	local reached_first_char: boolean = false

	for i = 1, <= #core.current_line do
		local c: uint8 = core.current_line[i]

		if c == ' '_u8 then
			if not reached_first_char then
				indent_level = indent_level + 1
			end
		else
			reached_first_char = true
		end
	end

	if core.char_index > 1 then
		local c: uint8 = core.current_line[core.char_index - 1]
		if c == '{'_u8 or c == '('_u8 or c == '['_u8 then
			brace_level = 2
		end
	end

	return indent_level, brace_level
end

local function drawCode(vm: *EVM): void
    -- scan src_lines for yet-unclosed multiline comments
	local brace_level: uint64 = 0
    sh_mlcomment_level = 0
    if core.start_line > 1 then
        for li = 1, < core.start_line do
            local l: sequence(uint8) = core.src_lines[li]
            for ci = 1, <= #l do
                local c: uint8 = l[ci]

                if c == '/'_u8 then
                    if (ci < #l) and (l[ci + 1] == '*'_u8) then
                        sh_mlcomment_level = sh_mlcomment_level + 1
                        ci = ci + 1
					elseif (ci < #l) and (l[ci + 1] == '/'_u8) then
                        break
                    end
                elseif c == '*'_u8 then
                    if (ci < #l) and (l[ci + 1] == '/'_u8) and (sh_mlcomment_level > 0) then
                        sh_mlcomment_level = sh_mlcomment_level - 1
                        ci = ci + 1
                    end
				end
				
				if sh_mlcomment_level == 0 then
					if c == '{'_u8 or c == '('_u8 or c == '['_u8 then
						brace_level = brace_level + 1
					elseif c == '}'_u8 or c == ')'_u8 or c == ']'_u8 then
						if brace_level > 0 then
							brace_level = brace_level - 1
						end
					end
				end
            end
        end
    end

	-- measure highest line number
	local line_number_spacing: int32 = (vm.gpu:measureInt(#core.src_lines) + 1) * 6

    -- draw code with syntax highlighting
	sh_line_index = core.start_line
	sh_line = core.src_lines[sh_line_index]
	sh_char_index = 1
	sh_max_line_index = math.min(#core.src_lines, core.start_line + 38)
	local draw_line: sequence(uint8) = sh_line
	local draw_line_index: uinteger = sh_line_index
	local draw_char_index: uinteger = 1
    local horizontal_offset: int32 = (core.start_char - 1) * -6 -- shift line to the left for horizontal scrolling
	local char_x: int32 = line_number_spacing + horizontal_offset
    local line_y: int32 = 9

	local cursor_y: int32 = 9 + ((core.line_index - core.start_line) * 9)
	vm.gpu:drawRect2D(line_number_spacing - 1, cursor_y, GPU_VSCREEN_W, 9, GPU_GRAY & 0xFFFFFFC0)
    vm.gpu:drawRect2D(line_number_spacing + horizontal_offset + ((core.char_index - 1) * 6), cursor_y, 6, 9, core.cursor_color)

	local encountered_char: boolean = false
	local brace_colors: [3]uint32 = {
		GPU_YELLOW,
		GPU_PINK,
		GPU_LBLUE
	}
	while true do
        -- get next token
        nextToken(vm)
		if sh_token == 0 then
			break
		end

        -- get token color
		local color: uint32
		switch sh_token do
			case Token.COMMENT then
				color = GPU_GRAY
			case ','_u8, ':'_u8, ';'_u8 then
				color = GPU_LGRAY
			case '$'_u8, '#'_u8, '`'_u8, '@'_u8 then
				color = GPU_RED
			case '{'_u8, '('_u8, Token.BRAK then
				color = brace_colors[brace_level % 3]
				brace_level = brace_level + 1
			case '}'_u8, ')'_u8, ']'_u8 then
				if brace_level > 0 then
					brace_level = brace_level - 1
					color = brace_colors[brace_level % 3]
				else
					color = GPU_RED
				end
			case Token.STRUCT, Token.ENUM, Token.IF, Token.ELSE, Token.WHILE, Token.FOR, Token.BREAK, Token.CONTINUE, Token.RETURN, Token.SIZEOF then
				color = GPU_PINK
			case Token.VOID, Token.INT, Token.FLOAT, Token.VEC2, Token.VEC3, Token.STRING, Token.STRUCT_ID, Token.VARARGS then
				color = GPU_BLUE
			case Token.INT_LITERAL, Token.FLOAT_LITERAL, Token.STRING_LITERAL then
				color = GPU_ORANGE
			case Token.ID then
				if vm.has_id then
					if vm.current_id.class == Class.API then
						color = GPU_GREEN
					elseif vm.current_id.class == Class.CONSTANT then
						color = GPU_ORANGE
					end
				else
					color = GPU_WHITE
				end
			case Token.UNKNOWN then
				color = GPU_RED
			else
				if sh_token >= Token.LNOT and sh_token < Token.BRAK then
					color = GPU_LGRAY
				else
					color = GPU_WHITE
				end
		end

		local ray_col: rl.color = {
			(@cuchar)(color >> 24),
			(@cuchar)((color & 0xFF0000) >> 16),
			(@cuchar)((color & 0x00FF00) >> 8),
			(@cuchar)(color & 0xFF),
		}

		-- draw chars until we catch up to the current tokenizer position
		while true do
			if (draw_line_index == sh_line_index) and (draw_char_index == sh_char_index) then
				break
			end

			if draw_char_index == #draw_line then
				draw_line_index = draw_line_index + 1
				if draw_line_index >= sh_max_line_index + 1 then
					break
				end
				draw_line = core.src_lines[draw_line_index]
				draw_char_index = 1
				char_x = line_number_spacing + horizontal_offset
				line_y = line_y + 9
				encountered_char = false
			else
				local c: uint8 = draw_line[draw_char_index]
				if c ~= ' '_u8 then
					encountered_char = true
				end

				if char_x >= line_number_spacing then
					if not encountered_char and ((draw_char_index - 1) % 2 == 0) and c == ' '_u8 then
						-- TODO: find a way to highlight the rightmost indent guide,
						-- only line index matters
						-- getting the indent level of the line will probably work?

						vm.gpu:drawRect2D(char_x, line_y, 1, 9, 0xC3C3C3C0)
						char_x = char_x + 6
					else
						vm.gpu:drawChar2D(c, &char_x, line_y, ray_col)
					end
				else
					char_x = char_x + 6
				end
				draw_char_index = draw_char_index + 1
			end
		end
    end

	vm.gpu:drawRect2D(0, 9, line_number_spacing - 1, 351, GPU_GRAY & 0xFFFFFFC0)
	line_y = 9
	for i = core.start_line, <= #core.src_lines do
		if line_y >= 360 then break end
		local number_size: int32 = vm.gpu:measureInt(i)
		local number_x: int32 = (((line_number_spacing - 6) /// 6) - (number_size)) * 6
		vm.gpu:printInt2D(number_x, line_y, (i == core.line_index) and GPU_LGRAY or GPU_GRAY, i, nilptr)
		line_y = line_y + 9
	end
end

global function stateCodeInit(sm: *StateMachine, vm: *EVM): void
    core:appendLine()

    core.start_line = 1
    core.start_char = 1
    core.line_index = 1
    core.char_index = 1
    core.current_line = core.src_lines[1]
end

global function stateCodeEnter(sm: *StateMachine, vm: *EVM): void
    vm.gpu:setRenderTexture(RenderTexture.CODE)
end

global function stateCodeExit(sm: *StateMachine, vm: *EVM): void
end

global function stateCodeUpdate(sm: *StateMachine, vm: *EVM): void
    if input.is_ctrl_down and rl.isKeyPressed(rl.keyboardKey.I) then
        sm:resetFileBrowser(core.user_directory, FileBrowserMode.LOAD)
        sm.queued_dialog = DialogID.IMPORT_CODE
        return
    end

    if input.is_ctrl_down and input.pressedRepeat(rl.keyboardKey.D) then
        core:insertLine(core.line_index + 1)
        local new_line: sequence(uint8) = core.src_lines[core.line_index + 1]
        new_line:pop() -- remove terminator

        for i = 1, <= #core.current_line do
            new_line:push(core.current_line[i])
        end

        core:changeCodeLine(core.line_index + 1)
        return
    end

	if input.mouse_wheel_y > 0 then
		core.start_line = math.max(core.start_line - (input.mouse_wheel_y * 3), 1)
	elseif input.mouse_wheel_y < 0 then
		core.start_line = math.clamp(core.start_line - (input.mouse_wheel_y * 3), 1, math.max(1, #core.src_lines - 37))
	end
	if input.left_clicked or (input.left_click_held and (math.abs(input.left_drag_x) > 6 or math.abs(input.left_drag_y) > 9)) then
		local line_number_spacing: int32 = (vm.gpu:measureInt(#core.src_lines) + 1) * 6

		if input.isMouseInRect(line_number_spacing, 9, GPU_VSCREEN_W - line_number_spacing, GPU_VSCREEN_H - 9) then
			local line_index: int32 = (input.mouse_y - 9) /// 9
			local char_index: int32 = (input.mouse_x - line_number_spacing) /// 6
			core:changeCodeLine(core.start_line + line_index)
			core:changeCharacterIndex(core.start_char + char_index)
		end
	end

    if input.pressedRepeat(rl.keyboardKey.LEFT) then
        if core.char_index == 1 then
            if core.line_index > 1 then
                core:changeCodeLine(core.line_index - 1)
                core:changeCharacterIndex(#core.current_line)
            end
        else
            core:changeCharacterIndex(core.char_index - 1)
        end
    elseif input.pressedRepeat(rl.keyboardKey.RIGHT) then
        if core.char_index == #core.current_line then
            if core.line_index < #core.src_lines then
                core:changeCodeLine(core.line_index + 1)
                core:changeCharacterIndex(1)
            end
        else
            core:changeCharacterIndex(core.char_index + 1)
        end
    elseif input.pressedRepeat(rl.keyboardKey.UP) then
        if input.is_alt_down then
            if core.line_index > 1 then
                local temp: sequence(uint8) = core.src_lines[core.line_index - 1]
                core.src_lines[core.line_index - 1] = core.current_line
                core.src_lines[core.line_index] = temp
                core:changeCodeLine(core.line_index - 1)
            end
        else
            if core.line_index > 1 then
                core:changeCodeLine(core.line_index - 1)
            else
                core:changeCharacterIndex(1)
            end
        end
    elseif input.pressedRepeat(rl.keyboardKey.DOWN) then
        if input.is_alt_down then
            if core.line_index < #core.src_lines then
                local temp: sequence(uint8) = core.src_lines[core.line_index + 1]
                core.src_lines[core.line_index + 1] = core.current_line
                core.src_lines[core.line_index] = temp
                core:changeCodeLine(core.line_index + 1)
            end
        else
            if core.line_index < #core.src_lines then
                core:changeCodeLine(core.line_index + 1)
            else
                core:changeCharacterIndex(#core.current_line)
            end
        end
    elseif input.pressedRepeat(rl.keyboardKey.ENTER) then
		local indent_level: uint32
		local brace_level: uint32
		indent_level, brace_level = getIndentLevel()

		if isInsideBracketPair() then
			-- split current line at cursor
			core:insertLine(core.line_index + 1)
			core:insertLine(core.line_index + 1)
			local new_line_0: sequence(uint8) = core.src_lines[core.line_index + 1]
			local new_line_1: sequence(uint8) = core.src_lines[core.line_index + 2]
			new_line_0:pop() -- remove terminator
			new_line_1:pop() -- remove terminator

			for i = 0, < indent_level + brace_level do
				new_line_0:push(' '_u8)
			end
			new_line_0:push('\0'_u8)

			for i = 0, < indent_level do
				new_line_1:push(' '_u8)
			end
	
			while core.char_index < #core.current_line do
				local c: uint8 = core.current_line:remove(core.char_index)
				new_line_1:push(c)
			end
			new_line_1:push('\0'_u8)
	
			core:changeCodeLine(core.line_index + 1)
			core:changeCharacterIndex(#core.current_line)
		else
			-- split current line at cursor
			core:insertLine(core.line_index + 1)
			local new_line: sequence(uint8) = core.src_lines[core.line_index + 1]
			new_line:pop() -- remove terminator

			for i = 0, < indent_level + brace_level do
				new_line:push(' '_u8)
			end
	
			while core.char_index < #core.current_line do
				local c: uint8 = core.current_line:remove(core.char_index)
				new_line:push(c)
			end
			new_line:push('\0'_u8)
	
			core:changeCodeLine(core.line_index + 1)
			core:changeCharacterIndex(1 + indent_level + brace_level)
		end
    elseif input.pressedRepeat(rl.keyboardKey.BACKSPACE) then
		if isInsideBracketPair() then
        	core:deleteChar(true)
        	core:deleteChar(false)
		else
        	core:deleteChar(false)
		end
    elseif input.pressedRepeat(rl.keyboardKey.DELETE) then
        core:deleteChar(true)
    elseif input.pressedRepeat(rl.keyboardKey.TAB) then
		if input.is_shift_down then
			-- deindent
			local indent_level: uint32
			local dummy: uint32
			indent_level, dummy = getIndentLevel()

			if indent_level >= 2 then
				core.current_line:remove(1)
				core.current_line:remove(1)
				core:changeCharacterIndex(math.max(core.char_index - 2, 1))
			end
		else
			core:insertChar(' '_u8)
			core:insertChar(' '_u8)
		end
    elseif input.pressedRepeat(rl.keyboardKey.PAGE_UP) then
        core:changeCodeLine(core.line_index - 37)
    elseif input.pressedRepeat(rl.keyboardKey.PAGE_DOWN) then
        core:changeCodeLine(core.line_index + 37)
    elseif input.pressedRepeat(rl.keyboardKey.HOME) then
        core:changeCharacterIndex(1)
    elseif input.pressedRepeat(rl.keyboardKey.END) then
        core:changeCharacterIndex(#core.current_line)
    else
        local c: cint = rl.getCharPressed()
        while c ~= 0 do
			switch c do
				case '('_u8 then
					core:insertChar('('_u8)
					core:insertChar(')'_u8)
					core:changeCharacterIndex(core.char_index - 1)
				case '{'_u8 then
					core:insertChar('{'_u8)
					core:insertChar('}'_u8)
					core:changeCharacterIndex(core.char_index - 1)
				case '['_u8 then
					core:insertChar('['_u8)
					core:insertChar(']'_u8)
					core:changeCharacterIndex(core.char_index - 1)
				case '}'_u8, ')'_u8, ']'_u8 then
					if wouldDoubleCloseBrackets(c) then
						core:changeCharacterIndex(core.char_index + 1)
					else
						core:insertChar(c)
					end
				else
					core:insertChar(c)
			end

            c = rl.getCharPressed()
        end
    end
end

global function stateCodeDraw(sm: *StateMachine, vm: *EVM): void
    rl.clearBackground({0, 0, 0, 0})
    vm.gpu:camera2D(-1)

    drawCode(vm)
end

global function stateCodeCleanup(sm: *StateMachine, vm: *EVM): void
end
