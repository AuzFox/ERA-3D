require("arg")
require("ecc")
require("evm")
require("state_boot")
require("state_main")
require("state_tracker")
require("state_run")

global vm: *e3d.EVM
global sm: StateMachine

local function init(): void
	vm = e3d.new_vm()
	e3d.set_default_btnmap()

	io.printf("0x%08X - 0x%08X\n", 0, e3d.GLOBALS_START_ADDR - 1)
	io.printf("0x%08X - 0x%08X\n", e3d.GLOBALS_START_ADDR, e3d.LOCALS_START_ADDR - 1)
	io.printf("0x%08X - 0x%08X\n", e3d.LOCALS_START_ADDR, e3d.ARGS_START_ADDR - 1)
	io.printf("0x%08X - 0x%08X\n", e3d.ARGS_START_ADDR, e3d.TMEM_START_ADDR - 1)
	io.printf("0x%08X - 0x%08X\n", e3d.TMEM_START_ADDR, e3d.OMEM_START_ADDR - 1)
	io.printf("0x%08X - 0x%08X\n", e3d.OMEM_START_ADDR, e3d.WMEM_START_ADDR - 1)
	io.printf("0x%08X - 0x%08X\n", e3d.WMEM_START_ADDR, e3d.SMEM_START_ADDR - 1)
	io.printf("0x%08X - 0x%08X\n", e3d.SMEM_START_ADDR, e3d.UNUSED_START_ADDR - 1)
	io.printf("0x%08X - 0x%08X\n", e3d.UNUSED_START_ADDR, e3d.ROM_START_ADDR - 1)
	io.printf("0x%08X - 0x%08X\n", e3d.ROM_START_ADDR, e3d.RAM_MAX_ADDR)

	sm.states = {
		{
			state_boot_init,
			state_boot_update,
			state_boot_draw
		},
		{
			state_main_init,
			state_main_update,
			state_main_draw
		},
		{
			state_tracker_init,
			state_tracker_update,
			state_tracker_draw
		},
		{
			state_run_init,
			state_run_update,
			state_run_draw
		}
	}

	sm:init(vm)
end

local function run(): void
	while not rl.windowShouldClose() do
		sm:update_state(vm)
		
		-- update audio stream
		vm.soundchip:update_audio()

		-- update render settings
		if sm.state_id == StateID.RUN and vm.gpu.update_tex then
			rl.updateTexture(vm.gpu.gfx_texture, &vm.gpu.tmem)
			vm.gpu.update_tex = false
		end

		sm:draw_state(vm)
		sm:set_queued_state()
	end
end

if #arg == 1 then
	init()
	run()
else
	print("SYNTAX: era-3d <script>")
end
