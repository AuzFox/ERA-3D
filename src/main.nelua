require("os")

require("definitions")
require("compiler")
require("evm")
require("statemachine")
require("state_boot")
require("state_code")
require("state_texture")
require("state_model")
require("state_tracker")
require("state_run")
require("dialog_image")
require("dialog_sample")
require("dialog_model")
require("input")
require("docs")

local function consoleUpdate(): void <forwarddecl> end
local function apiListUpdate(): void <forwarddecl> end
local function docStringUpdate(): void <forwarddecl> end
local function consoleDraw(log_y: int32): void <forwarddecl> end
local function apiListDraw(log_y: int32): void <forwarddecl> end
local function docStringDraw(log_y: int32): void <forwarddecl> end

local MAX_PARTICLES <comptime> = 24

local TriParticle = @record {
	position: rl.vector3,
	rotation: rl.vector3,
	rotation_factor: rl.vector3,
	age: float32,
	age_factor: float32
}

local particles: [MAX_PARTICLES]TriParticle
local log_level_names: [8]string = {
	"all",
	"trace",
	"debug",
	"info",
	"warning",
	"error",
	"fatal",
	"none"
}

local load_cart_filters: []cstring = {
    "*.e3d"
}
local save_cart_filters: []cstring = {
    "*.e3d"
}

local function updateCursorColor(
    frequency1: float32,
    frequency2: float32,
    frequency3: float32,
    phase1: float32,
    phase2: float32,
    phase3: float32,
    center: float32,
    width: float32,
    len: float32): void
    -- default center = 128;
    -- default width = 127;
    -- default len = 50;

    local i: float32 = util.wrapF(rl.getTime() * 12, 0, len)

    local fred: float32 = math.sin(frequency1 * i + phase1) * width + center
    local fgreen: float32 = math.sin(frequency2 * i + phase2) * width + center
    local fblue: float32 = math.sin(frequency3 * i + phase3) * width + center

    local red: uint32 = ((@uint32)(fred) & 0xFF)
    local green: uint32 = ((@uint32)(fgreen) & 0xFF)
    local blue: uint32 = ((@uint32)(fblue) & 0xFF)

    core.cursor_color = (red << 24) | (green << 16) | (blue << 8) | 0xFF

	red = red /// 2
    green = green /// 2
    blue = blue /// 2

    core.cursor_color_dark = (red << 24) | (green << 16) | (blue << 8) | 0xFF
end

local function randomizeParticle(p: *TriParticle): void
	p.position = {
		-- min + math.random() * (max - min)
		-1.5 + math.random() * (1.5 - -1.5),
		-1.5,
		-2.5 + math.random() * (-1.0 - -2.5)
	}
	p.rotation = {
		-- min + math.random() * (max - min)
		0.0 + math.random() * (360.0 - 0.0),
		0.0 + math.random() * (360.0 - 0.0),
		0.0 + math.random() * (360.0 - 0.0)
	}
	p.rotation_factor = {
		-- min + math.random() * (max - min)
		0.1 + math.random() * (1.0 - 0.1),
		0.1 + math.random() * (1.0 - 0.1),
		0.1 + math.random() * (1.0 - 0.1)
	}
	-- min + math.random() * (max - min)
	p.age_factor = 0.06 + math.random() * (0.12 - 0.06)
	p.age = 0.0
end

local function setupDirectories(): void
	## if ccinfo.is_windows then
		core.user_directory = os.getenv("HOMEDRIVE") .. os.getenv("HOMEPATH") .. "\\"
		core.data_directory = core.user_directory .. "AppData\\Roaming\\era-3d\\"
		core.carts_directory = core.data_directory .. "carts\\"
		core.memcards_directory = core.data_directory .. "memcards\\"
	## elseif ccinfo.is_linux then
		core.user_directory = os.getenv("HOME") .. "/"
		core.data_directory = core.user_directory .. ".era-3d/"
		core.carts_directory = core.data_directory .. "carts/"
		core.memcards_directory = core.data_directory .. "memcards/"
	## end

	local succees: boolean
	local errmsg: string
	local errcode: integer

	if not rl.directoryExists(core.data_directory) then
		succees, errmsg, errcode = util.mkdir(core.data_directory)
		print("mkdir", core.data_directory, succees, errmsg, errcode)
	end
	if not rl.directoryExists(core.carts_directory) then
		succees, errmsg, errcode = util.mkdir(core.carts_directory)
		print("mkdir", core.carts_directory, succees, errmsg, errcode)
	end
	if not rl.directoryExists(core.memcards_directory) then
		succees, errmsg, errcode = util.mkdir(core.memcards_directory)
		print("mkdir", core.memcards_directory, succees, errmsg, errcode)
	end
end

local function handleConfigFile(): void
	## if ccinfo.is_windows then
		core.config_file_path = core.data_directory .. "config.json"
	## elseif ccinfo.is_linux then
		core.config_file_path = core.data_directory .. "config.json"
	## end

	if rl.fileExists(core.config_file_path) then
		core:loadConfigFile()
	else
		core:setDefaultConfig()
		core:saveConfigFile()
	end
end

local function init(): void
	setupDirectories()
	handleConfigFile()

	vm = newVM()
	gpu = &vm.gpu
	soundchip = &vm.soundchip
	input.setDefaultButtonMap()

	statemachine.states = {
		{
			stateBootInit,
			stateBootEnter,
			stateBootExit,
			stateBootUpdate,
			stateBootDraw,
			stateBootCleanup
		},
		{
			stateCodeInit,
			stateCodeEnter,
			stateCodeExit,
			stateCodeUpdate,
			stateCodeDraw,
			stateCodeCleanup
		},
		{
			stateTrackerInit,
			stateTrackerEnter,
			stateTrackerExit,
			stateTrackerUpdate,
			stateTrackerDraw,
			stateTrackerCleanup
		},
		{
			stateModelInit,
			stateModelEnter,
			stateModelExit,
			stateModelUpdate,
			stateModelDraw,
			stateModelCleanup
		},
		{
			stateTextureInit,
			stateTextureEnter,
			stateTextureExit,
			stateTextureUpdate,
			stateTextureDraw,
			stateTextureCleanup
		},
		{
			stateRunInit,
			stateRunEnter,
			stateRunExit,
			stateRunUpdate,
			stateRunDraw,
			stateRunCleanup
		}
	}

	statemachine.dialogs = {
		{
			nilptr,
			nilptr,
			nilptr
		},
		{
			dialogImageConfigReset,
			dialogImageConfigUpdate,
			dialogImageConfigDraw,
		},
		{
			dialogSampleConfigReset,
			dialogSampleConfigUpdate,
			dialogSampleConfigDraw,
		},
		{
			dialogModelConfigReset,
			dialogModelConfigUpdate,
			dialogModelConfigDraw,
		}
	}

	core.api_list_catagory = docs.APICatagory.ALL
	core.api_list_index = 1
	core.api_current_list = docs.api_lists[core.api_list_catagory]
	
	core.log_update_fn = consoleUpdate
	core.log_draw_fn = consoleDraw
	core.log_state = LogState.HIDDEN
	core.animation_type = MenuAnimation.NONE
	core.anim_time = 0.0
	core.anim_beginning = 0.0
	core.anim_target = 0.0
    core.facing_angle = 0.0
    core.dialog_size = 0.0
	core.current_cart_name = "UNTITLED CART"
	core.log_command_str = (@string){
		(@*[0]uint8)(&core.log_command_buffer[0]),
		0
	}

	for i = 0, < MAX_PARTICLES do
		local p: *TriParticle = &particles[i]
		randomizeParticle(p)
	end

	statemachine:init()

	core:log(LogEntryType.INFO, "WELCOME TO ERA-3D v0.0.0!\nrun >help for a list of commands\n ", false)
end

local function updateMenuAnimation(): void
    switch core.animation_type do
        case MenuAnimation.STATE_SWITCH then
            if core.anim_time < 0.5 then
                core.anim_time = core.anim_time + rl.getFrameTime()
                core.facing_angle = rle.quadOut(core.anim_time, core.anim_beginning, core.anim_target - core.anim_beginning, 0.5)
            else
                switch statemachine.state_id do
                    case StateID.CODE then
                        core.facing_angle = 0.0
                    case StateID.TRACKER then
                        core.facing_angle = 90.0
                    case StateID.MODEL then
                        core.facing_angle = 180.0
                    case StateID.TEXTURE then
                        core.facing_angle = 270.0
                end
                core.animation_type = MenuAnimation.NONE
            end
        case MenuAnimation.DIALOG_OPENCLOSE then
            if core.anim_time < 0.25 then
                core.anim_time = core.anim_time + rl.getFrameTime()
                core.dialog_size = rle.quadOut(core.anim_time, core.anim_beginning, core.anim_target - core.anim_beginning, 0.25)
            else
                core.dialog_size = core.anim_target
                core.animation_type = MenuAnimation.NONE
            end
        case MenuAnimation.LOG_OPENCLOSE then
            if core.anim_time < 0.25 then
                core.anim_time = core.anim_time + rl.getFrameTime()
                core.log_offset = rle.quadOut(core.anim_time, core.anim_beginning, core.anim_target - core.anim_beginning, 0.25)
            else
                core.log_offset = core.anim_target
                core.animation_type = MenuAnimation.NONE
            end
    end
end

local function runConsoleCommand(): void
	local argc: integer = #core.log_command_args

	if argc == 0 then
		return
	end

	local cmd: string = core.log_command_args[1]

	if cmd == "cls" then
		core:clearLog()
	elseif cmd == "api" then
		core.log_update_fn = apiListUpdate
		core.log_draw_fn = apiListDraw
	elseif cmd == "help" then
		if argc == 1 then
			core:log(LogEntryType.INFO, "cls   : clear console", false)
			core:log(LogEntryType.INFO, "api   : view API function list", false)
			core:log(LogEntryType.INFO, "help  : lookup command/API function help page or list console commands", false)
			core:log(LogEntryType.INFO, "config: view/set config options", false)
			core:log(LogEntryType.INFO, " ", false)
			core:log(LogEntryType.INFO, "run >help $command for more detailed help on $command (i.e. >help config)", false)
			core:log(LogEntryType.INFO, "run >help $function for API documentation for $function (i.e. >help pushMatrix)", false)
		elseif argc == 2 then
			local help_cmd: string = core.log_command_args[2]

			if help_cmd == "cls" then
				core:log(LogEntryType.INFO, "  SYNTAX:", false)
				core:log(LogEntryType.INFO, "    cls", false)
				core:log(LogEntryType.INFO, "  DESCRIPTION:", false)
				core:log(LogEntryType.INFO, "    clear all previous output from the console", false)
			elseif help_cmd == "api" then
				core:log(LogEntryType.INFO, "  SYNTAX:", false)
				core:log(LogEntryType.INFO, "    api", false)
				core:log(LogEntryType.INFO, "  DESCRIPTION:", false)
				core:log(LogEntryType.INFO, "    view API function list", false)
				core:log(LogEntryType.INFO, "    press UP/DOWN to navigate list", false)
				core:log(LogEntryType.INFO, "    press ENTER to view documentation for the selected function", false)
				core:log(LogEntryType.INFO, "    press ESCAPE to exit the API list viewer", false)
			elseif help_cmd == "help" then
				core:log(LogEntryType.INFO, "  SYNTAX:", false)
				core:log(LogEntryType.INFO, "    help $cmd_or_func", false)
				core:log(LogEntryType.INFO, "  ARGUMENTS", false)
				core:log(LogEntryType.INFO, "    cmd_or_func: the command or API function to lookup help for", false)
				core:log(LogEntryType.INFO, "  DESCRIPTION:", false)
				core:log(LogEntryType.INFO, "    if $cmd_or_func is given, looks up the help page for $cmd_or_func", false)
				core:log(LogEntryType.INFO, "    otherwise, lists all console commands", false)
				core:log(LogEntryType.INFO, " ", false)
				core:log(LogEntryType.INFO, "    command arguments are prefixed with `$`", false)
			elseif help_cmd == "config" then
				core:log(LogEntryType.INFO, "  SYNTAX:", false)
				core:log(LogEntryType.INFO, "    config $setting $value", false)
				core:log(LogEntryType.INFO, "  ARGUMENTS", false)
				core:log(LogEntryType.INFO, "    setting: the setting to lookup or change", false)
				core:log(LogEntryType.INFO, "    value  : the value to change setting to", false)
				core:log(LogEntryType.INFO, "  DESCRIPTION:", false)
				core:log(LogEntryType.INFO, "    if $value is not given, looks up the current value of $setting", false)
				core:log(LogEntryType.INFO, "    otherwise, sets $setting to $value", false)
				core:log(LogEntryType.INFO, " ", false)
				core:log(LogEntryType.INFO, "    if no arguments are given, lists all settings", false)
			else
				--local doc_str: string = docs.getDocString(help_cmd)
				--if doc_str.data ~= nilptr then
				--	core.current_doc_str = doc_str
				--	core.log_prev_update_fn = core.log_update_fn
				--	core.log_prev_draw_fn = core.log_draw_fn
				--	core.log_update_fn = docStringUpdate
				--	core.log_draw_fn = docStringDraw
				--else
					core:log(LogEntryType.HOST_ERROR, "help: help page not found", false)
				--end
			end
		else
			core:log(LogEntryType.HOST_ERROR, "help: invalid arguments", false)
		end
	elseif cmd == "config" then
		local setting: string

		if argc == 1 then
			core:log(LogEntryType.INFO, "SETTING       | VALID VALUES | DESCRIPTION", false)
			core:log(LogEntryType.INFO, "--------------+--------------+----------------", false)
			core:log(LogEntryType.INFO, "log_level     | 0-7          | raylib log filter level", false)
			core:log(LogEntryType.INFO, "vsync         | true/false   | enable vsync", false)
			core:log(LogEntryType.INFO, "highdpi       | true/false   | enable highdpi mode", false)
			core:log(LogEntryType.INFO, "draw_fps      | true/false   | draw FPS counter", false)
			core:log(LogEntryType.INFO, "crt_blur      | true/false   | enable CRT blur effect", false)
			core:log(LogEntryType.INFO, "crt_noise     | true/false   | enable CRT noise effect", false)
			core:log(LogEntryType.INFO, "crt_scanlines | true/false   | enable CRT scanline effect", false)
		elseif argc == 2 then
			-- config setting
			setting = core.log_command_args[2]

			if setting == "log_level" then
				core:log(LogEntryType.INFO, string.format("%d (%s)", core.config.log_level, log_level_names[core.config.log_level]), false)
			elseif setting == "vsync" then
				core:log(LogEntryType.INFO, core.config.vsync and "true" or "false", false)
			elseif setting == "highdpi" then
				core:log(LogEntryType.INFO, core.config.highdpi and "true" or "false", false)
			elseif setting == "draw_fps" then
				core:log(LogEntryType.INFO, core.config.draw_fps and "true" or "false", false)
			elseif setting == "crt_blur" then
				core:log(LogEntryType.INFO, core.config.crt_blur and "true" or "false", false)
			elseif setting == "crt_noise" then
				core:log(LogEntryType.INFO, core.config.crt_noise and "true" or "false", false)
			elseif setting == "crt_scanlines" then
				core:log(LogEntryType.INFO, core.config.crt_scanlines and "true" or "false", false)
			else
				core:log(LogEntryType.HOST_ERROR, "config: unknown setting", false)
			end
		elseif argc == 3 then
			-- config setting val
			setting = core.log_command_args[2]
			local val: string = core.log_command_args[3]
			local save_config: boolean = false

			if setting == "log_level" then
				if val == "0" then
					core.config.log_level = rl.traceLogLevel.ALL
					rl.setTraceLogLevel(core.config.log_level)
					save_config = true
				elseif val == "1" then
					core.config.log_level = rl.traceLogLevel.TRACE
					rl.setTraceLogLevel(core.config.log_level)
					save_config = true
				elseif val == "2" then
					core.config.log_level = rl.traceLogLevel.DEBUG
					rl.setTraceLogLevel(core.config.log_level)
					save_config = true
				elseif val == "3" then
					core.config.log_level = rl.traceLogLevel.INFO
					rl.setTraceLogLevel(core.config.log_level)
					save_config = true
				elseif val == "4" then
					core.config.log_level = rl.traceLogLevel.WARNING
					rl.setTraceLogLevel(core.config.log_level)
					save_config = true
				elseif val == "5" then
					core.config.log_level = rl.traceLogLevel.ERROR
					rl.setTraceLogLevel(core.config.log_level)
					save_config = true
				elseif val == "6" then
					core.config.log_level = rl.traceLogLevel.FATAL
					rl.setTraceLogLevel(core.config.log_level)
					save_config = true
				elseif val == "7" then
					core.config.log_level = rl.traceLogLevel.NONE
					rl.setTraceLogLevel(core.config.log_level)
					save_config = true
				else
					core:log(LogEntryType.HOST_ERROR, "config: log_level setting must be set to one of the following:", false)
					core:log(LogEntryType.HOST_ERROR, "  0 (all)", false)
					core:log(LogEntryType.HOST_ERROR, "  1 (trace)", false)
					core:log(LogEntryType.HOST_ERROR, "  2 (debug)", false)
					core:log(LogEntryType.HOST_ERROR, "  3 (info)", false)
					core:log(LogEntryType.HOST_ERROR, "  4 (warning)", false)
					core:log(LogEntryType.HOST_ERROR, "  5 (error)", false)
					core:log(LogEntryType.HOST_ERROR, "  6 (fatal)", false)
					core:log(LogEntryType.HOST_ERROR, "  7 (none)", false)
				end
			elseif setting == "vsync" then
				if val == "true" then
					core.config.vsync = true
					gpu:updateConfigFlags()
					save_config = true
				elseif val == "false" then
					core.config.vsync = false
					gpu:updateConfigFlags()
					save_config = true
				else
					core:log(LogEntryType.HOST_ERROR, "config: vsync setting must be set to true or false", false)
				end
			elseif setting == "highdpi" then
				if val == "true" then
					core.config.highdpi = true
					core:log(LogEntryType.HOST_ERROR, "setting updated. restart ERA-3D for settings to take effect", false)
					save_config = true
				elseif val == "false" then
					core.config.highdpi = false
					core:log(LogEntryType.HOST_ERROR, "setting updated. restart ERA-3D for settings to take effect", false)
					save_config = true
				else
					core:log(LogEntryType.HOST_ERROR, "config: highdpi setting must be set to true or false", false)
				end
			elseif setting == "draw_fps" then
				if val == "true" then
					core.config.draw_fps = true
					save_config = true
				elseif val == "false" then
					core.config.draw_fps = false
					save_config = true
				else
					core:log(LogEntryType.HOST_ERROR, "config: draw_fps setting must be set to true or false", false)
				end
			elseif setting == "crt_blur" then
				if val == "true" then
					core.config.crt_blur = true
					gpu:updateCRTShader()
					save_config = true
				elseif val == "false" then
					core.config.crt_blur = false
					gpu:updateCRTShader()
					save_config = true
				else
					core:log(LogEntryType.HOST_ERROR, "config: crt_blur setting must be set to true or false", false)
				end
			elseif setting == "crt_noise" then
				if val == "true" then
					core.config.crt_noise = true
					gpu:updateCRTShader()
					save_config = true
				elseif val == "false" then
					core.config.crt_noise = false
					gpu:updateCRTShader()
					save_config = true
				else
					core:log(LogEntryType.HOST_ERROR, "config: crt_noise setting must be set to true or false", false)
				end
			elseif setting == "crt_scanlines" then
				if val == "true" then
					core.config.crt_scanlines = true
					gpu:updateCRTShader()
					save_config = true
				elseif val == "false" then
					core.config.crt_scanlines = false
					gpu:updateCRTShader()
					save_config = true
				else
					core:log(LogEntryType.HOST_ERROR, "config: crt_scanlines setting must be set to true or false", false)
				end
			else
				core:log(LogEntryType.HOST_ERROR, "config: unknown setting", false)
			end

			if save_config then
				core:saveConfigFile()
			end
		else
			core:log(LogEntryType.HOST_ERROR, "config: invalid arguments", false)
		end
	else
		core:log(LogEntryType.HOST_ERROR, "command not found", false)
	end
end

function consoleUpdate(): void
	if input.pressedRepeat(rl.keyboardKey.ENTER) then
		core:log(LogEntryType.INPUT, string.format(">%s", core.log_command_str), false)
		core:splitConsoleCommand()
		runConsoleCommand()
		core:clearConsoleCommand()
		return
	elseif input.pressedRepeat(rl.keyboardKey.BACKSPACE) then
		core:deleteConsoleChar()
		return
	end

	local c: cint = rl.getCharPressed()
	while c ~= 0 do
		core:insertConsoleChar(c)
		c = rl.getCharPressed()
	end
end

function consoleDraw(log_y: int32): void
	local line_y: int32 = log_y
	local line_index: int32 = util.wrapI(core.log_index - core.log_count, 0, LOG_MAX_LINES)
	local lines_drawn: int32 = 0
	for i = 0, < core.log_count do
		local line_ptr: *[0]cchar = (@*[0]cchar)(&core.log_text[line_index * (GPU_VSCREEN_W /// 6) + 1])

		local col: uint32
		switch core.log_types[line_index] do
			case LogEntryType.INPUT then
				col = GPU_WHITE
			case LogEntryType.INFO then
				col = GPU_GREEN
			case LogEntryType.HOST_ERROR then
				col = GPU_YELLOW
			case LogEntryType.COMPILE_ERROR then
				col = GPU_ORANGE
			case LogEntryType.RUNTIME_ERROR then
				col = GPU_RED
		end

		gpu:printCString2D(0, line_y, col, line_ptr)
		
		line_index = util.wrapI(line_index + 1, 0, LOG_MAX_LINES)
		line_y = line_y + 9
		lines_drawn = lines_drawn + 1
	end

	gpu:print2D(0, line_y, GPU_WHITE, ">")
	gpu:print2D(6, line_y, GPU_WHITE, core.log_command_str)
	gpu:drawRect2D(6 + (core.log_command_str.size * 6), line_y, 6, 9, core.cursor_color)
end

function apiListUpdate(): void
	if rl.isKeyPressed(rl.keyboardKey.ESCAPE) then
		core.log_update_fn = consoleUpdate
		core.log_draw_fn = consoleDraw
	elseif rl.isKeyPressed(rl.keyboardKey.ENTER) then
		core.current_doc_str = docs.getDocString(core.api_current_list[core.api_list_index])
		core.log_prev_update_fn = core.log_update_fn
		core.log_prev_draw_fn = core.log_draw_fn
		core.log_update_fn = docStringUpdate
		core.log_draw_fn = docStringDraw
	elseif input.pressedRepeat(rl.keyboardKey.UP) then
		core.api_list_index = math.clamp(core.api_list_index - 1, 1, #core.api_current_list)
	elseif input.pressedRepeat(rl.keyboardKey.DOWN) then
		core.api_list_index = math.clamp(core.api_list_index + 1, 1, #core.api_current_list)
	elseif input.pressedRepeat(rl.keyboardKey.LEFT) then
		core.api_list_catagory = math.clamp(core.api_list_catagory - 1, 0, docs.APICatagory.COUNT - 1)
		core.api_list_index = 1
		core.api_current_list = docs.api_lists[core.api_list_catagory]
	elseif input.pressedRepeat(rl.keyboardKey.RIGHT) then
		core.api_list_catagory = math.clamp(core.api_list_catagory + 1, 0, docs.APICatagory.COUNT - 1)
		core.api_list_index = 1
		core.api_current_list = docs.api_lists[core.api_list_catagory]
	end
end

function apiListDraw(log_y: int32): void
	local tab_names: []string = {
		"ALL",
		"MATH",
		"VECTORS",
		"MATRICES",
		"INPUT",
		"GRAPHICS",
		"AUDIO",
		"PHYSICS",
		"MEMORY",
		"MISC"
	}

	gpu:drawRect2D(0, log_y, GPU_VSCREEN_W, 9, GPU_DGRAY)
	gpu:drawRect2D(0, log_y + 20 * 9, GPU_VSCREEN_W, 10, GPU_DGRAY)

	local x: int32 = 0
	for i = 0, < #tab_names do
		local name: string = tab_names[i]
		gpu:print2D(x, log_y, i == core.api_list_catagory and core.cursor_color or GPU_LGRAY, name)
		x = x + (#name * 6) + 12
	end
	
	local start_index: integer = math.max(core.api_list_index - 9, 1)
	for i = start_index, <= start_index + 18 do
		if i > #core.api_current_list then break end

		if i == core.api_list_index then
			gpu:drawRect2D(0, log_y + ((i - start_index) * 9) + 9, GPU_VSCREEN_W, 9, GPU_DGRAY & 0xFFFFFFC0)
			gpu:print2D(0, log_y + ((i - start_index) * 9) + 9, core.cursor_color, core.api_current_list[i])
		else
			gpu:print2D(0, log_y + ((i - start_index) * 9) + 9, GPU_LGRAY, core.api_current_list[i])
		end
	end

	gpu:print2D(0, log_y + 1 + 20 * 9, GPU_LGRAY, "[ESCAPE]: EXIT   [UP/DOWN]: NAVIGATE LIST   [ENTER]: VIEW FUNCTION DOCS")
end

function docStringUpdate(): void
	if rl.isKeyPressed(rl.keyboardKey.ESCAPE) then
		core.log_update_fn = core.log_prev_update_fn
		core.log_draw_fn = core.log_prev_draw_fn
	end
end

function docStringDraw(log_y: int32): void
	gpu:print2D(0, log_y, GPU_GREEN, core.current_doc_str)
	gpu:drawRect2D(0, log_y + 20 * 9, GPU_VSCREEN_W, 10, GPU_DGRAY)
	if core.log_prev_update_fn == consoleUpdate then
		gpu:print2D(0, log_y + 1 + 20 * 9, GPU_LGRAY, "[ESCAPE]: RETURN TO CONSOLE")
	else
		gpu:print2D(0, log_y + 1 + 20 * 9, GPU_LGRAY, "[ESCAPE]: RETURN TO API LIST")
	end
end

local function updateLog(): void
	if input.is_ctrl_down then
		if rl.isKeyPressed(rl.keyboardKey.ENTER) then
			core.queued_log_state = LogState.HIDDEN
		end
	else
		core.log_update_fn()
	end
end

local function updatePopup(): void
	switch core.popup_state do
		case PopupState.ANIMATING then
			if core.popup_timer < 0.25 then
				core.popup_timer = core.popup_timer + rl.getFrameTime()
				core.popup_current_factor = rle.quadOut(core.popup_timer, core.popup_beginning_factor, core.popup_target_factor - core.popup_beginning_factor, 0.25)
			else
				core.popup_state = (core.popup_target_factor == 1.0) and PopupState.SHOWN or PopupState.HIDDEN
				core.popup_timer = 0.0
				core.popup_current_factor = core.popup_target_factor
			end
			core.popup_offset = (@uint32)(core.popup_current_factor * 9.0)
		case PopupState.SHOWN then
			core.popup_timer = core.popup_timer + rl.getFrameTime()

			if core.popup_timer >= 4.0 then
				core.popup_state = PopupState.ANIMATING
				core.popup_timer = 0.0
				core.popup_beginning_factor = 1.0
				core.popup_target_factor = 0.0
			end
	end
end

local function run(): void
	-- main loop
	while not rl.windowShouldClose() do
		gpu:refreshScreenSize()
		input.refresh(
			(@int32)(gpu.master_dest_rect.x),
			(@int32)(gpu.master_dest_rect.y),
			gpu.screen_w,
			gpu.screen_h
		)

		updatePopup()

		if core.animation_type ~= MenuAnimation.NONE then
			updateMenuAnimation()
		elseif core.log_state == LogState.SHOWN then
			updateLog()
		elseif statemachine.dialog_id ~= DialogID.NONE then
			if input.is_ctrl_down and rl.isKeyPressed(rl.keyboardKey.ENTER) then
				core.queued_log_state = LogState.SHOWN
			else
				statemachine:updateDialog()
			end
		else
			local update_state: boolean = true

			if statemachine.state_id ~= StateID.RUN then
				if input.clickedRect(0, false, GPU_VSCREEN_W - 48, 0, 48, 9) then
					statemachine.queued_state = StateID.CODE + ((input.mouse_x - (GPU_VSCREEN_W - 48)) /// 12)
					update_state = false
				elseif input.is_ctrl_down then
					if input.pressedRepeat(rl.keyboardKey.LEFT) then
						statemachine.queued_state = StateID.STATE_LEFT
						update_state = false
					elseif input.pressedRepeat(rl.keyboardKey.RIGHT) then
						statemachine.queued_state = StateID.STATE_RIGHT
						update_state = false
					elseif rl.isKeyPressed(rl.keyboardKey.R) then
						if input.is_alt_down then
							if vm:compile() then
								vm:resetVM(true)
								vm:dumpBytecode()
								core:popup(LogEntryType.INFO, "bytecode dumped")
							else
								core:log(LogEntryType.COMPILE_ERROR, vm.error, false)
								core:popup(LogEntryType.COMPILE_ERROR, "a compiler error occurred. press [CTRL+ENTER] to view log")
							end
						else
							if vm:compile() then
								vm:resetVM(true)
								
								vm.cycle_count = 0
								if vm:callHook(Hook.INIT) then
									statemachine.queued_state = StateID.RUN
									--print("init()", vm.cycle_count)
								else
									core:log(LogEntryType.RUNTIME_ERROR, vm.error, false)
									core:popup(LogEntryType.RUNTIME_ERROR, "a runtime error occurred. press [CTRL+ENTER] to view log")
								end
							else
								core:log(LogEntryType.COMPILE_ERROR, vm.error, false)
								core:popup(LogEntryType.COMPILE_ERROR, "a compiler error occurred. press [CTRL+ENTER] to view log")
							end
						end
						update_state = false
					elseif rl.isKeyPressed(rl.keyboardKey.S) then
						if input.is_shift_down or (core.current_cart_path == "") then
							local cart_save_path: cstring = tinyfd.saveFileDialog(
								"Save Cart",
								core.carts_directory,
								#save_cart_filters,
								&save_cart_filters,
								nilptr
							)

							if cart_save_path ~= nilptr then
								local file_path: string = (@string)(cart_save_path)
								core.current_cart_path = file_path:copy()
								core.current_cart_name = (@string)(rl.getFileName(file_path)):copy()

								if vm:saveCart(core.current_cart_path) then
									core:log(LogEntryType.INFO, "cart saved", true)
								else
									core:log(LogEntryType.HOST_ERROR, vm.error, true)
								end
							end
						else
							if vm:saveCart(core.current_cart_path) then
								core:log(LogEntryType.INFO, "cart saved", true)
							else
								core:log(LogEntryType.HOST_ERROR, vm.error, true)
							end
						end

						update_state = false
					elseif rl.isKeyPressed(rl.keyboardKey.O) then
						local cart_load_path: cstring = tinyfd.openFileDialog(
							"Load Cart",
							core.carts_directory,
							#load_cart_filters,
							&load_cart_filters,
							nilptr,
							false
						)

						if cart_load_path ~= nilptr then
							local file_path: string = (@string)(cart_load_path)
							if vm:loadCart(file_path) then
								core.current_cart_path = file_path:copy()
								core.current_cart_name = (@string)(rl.getFileName(file_path)):copy()
								core:log(LogEntryType.INFO, "cart loaded", true)
								gpu.update_tex = true
							else
								core:log(LogEntryType.HOST_ERROR, vm.error, true)
							end
						end

						update_state = false
					end
				end
			end

			if update_state and input.is_ctrl_down and rl.isKeyPressed(rl.keyboardKey.ENTER) then
				core.queued_log_state = LogState.SHOWN
				update_state = false
			end
			
			if update_state then
				statemachine:updateState()
			end
		end

		soundchip:updateAudio()

		if gpu.update_tex then
			gpu:updateTexture()
		end

		if gpu.update_lights then
			gpu:updateLights()
		end

		updateCursorColor(0.3, 0.3, 0.3, 0, 2, 4, 128.0, 127.0, 64.0)
		local crt_time: float32 = (@float32)(rl.getTime())
		rl.setShaderValue(gpu.crt_shader, gpu.crt_time_loc, &crt_time, rl.shaderUniformDataType.UNIFORM_FLOAT)

		-- draw to state render texture
		if core.log_state ~= LogState.SHOWN then
			gpu:beginCurrentRenderTexture()
				if statemachine.dialog_id ~= DialogID.NONE or core.animation_type == MenuAnimation.DIALOG_OPENCLOSE then
					statemachine:drawDialog()
				else
					statemachine:drawState()
				end
			gpu:endRenderTexture()
			
			gpu:resetMatrixStack()
		end

		-- draw to master render texture
		gpu:beginMasterRenderTexture()
			gpu:clearColor(GPU_BLACK)
			gpu:clear(GPU_CLEAR_ALL)

			if statemachine.state_id == StateID.RUN then
				gpu:camera2D(-1)
				gpu:drawCurrentRenderTexture()
			else
				gpu:camera3D(-1)
				
				local aspect: float32 = (@float32)(gpu.screen_w) / (@float32)(gpu.screen_h)
				local distance: float32 = 1.0
				local frustum_height: float32 = 2.0 * distance * math.tan(math.rad(gpu.system_cam3d.fovy * 0.5))
				local frustum_width: float32 = frustum_height * aspect

				local width: float32 = (frustum_width / 2)
				local height: float32 = (frustum_height / 2)

				-- draw triangle particles
				rlgl.pushMatrix()
					rlgl.disableBackfaceCulling()
					rl.beginShaderMode(gpu.gfx_shader)
						rlgl.begin(rlgl.QUADS)
							for i = 0, < MAX_PARTICLES do
								local p: *TriParticle = &particles[i]

								p.age = p.age + rl.getFrameTime() * p.age_factor
								if p.age > 3.0 then
									randomizeParticle(p)
								else
									p.position = p.position + (@rl.vector3){0.0, rl.getFrameTime() * p.age_factor, 0.0}
									p.rotation = p.rotation + ((@rl.vector3){
										90.0 * rl.getFrameTime() * p.age_factor,
										90.0 * rl.getFrameTime() * p.age_factor,
										90.0 * rl.getFrameTime() * p.age_factor
									} * p.rotation_factor)
								end

								rlgl.loadIdentity()
								rlgl.translatef(p.position.x, p.position.y, p.position.z)
								rlgl.rotatef(p.rotation.z, 0, 0, 1)
								rlgl.rotatef(p.rotation.y, 0, 1, 0)
								rlgl.rotatef(p.rotation.x, 1, 0, 0)

								local alpha: cuchar = 255 - (cuchar)((math.min(p.age, 1.5) / 1.5) * 255.0)

								rlgl.color4ub(0xFF, 0x00, 0x00, alpha)
								rlgl.vertex3f(0.0, 0.1, 0.0)
								rlgl.vertex3f(0.0, 0.1, 0.0)

								rlgl.color4ub(0x00, 0xFF, 0x00, alpha)
								rlgl.vertex3f(-0.1, -0.1, 0.0)

								rlgl.color4ub(0x00, 0x00, 0xFF, alpha)
								rlgl.vertex3f(0.1, -0.1, 0.0)
							end
						rlgl.ending()
					rl.endShaderMode()
					rlgl.enableBackfaceCulling()
				rlgl.popMatrix()

				if core.animation_type == MenuAnimation.STATE_SWITCH then
					-- clear depth buffer to prevent triangles from clipping with rendertextures
					gpu:clear(GPU_CLEAR_DEPTH)

					-- draw state rendertexture quads
					rlgl.pushMatrix()
						rlgl.rotatef(core.facing_angle, 0.0, 1.0, 0.0)
						
						-- code/run
						gpu:useRenderTexture(RenderTexture.CODE)
						rlgl.begin(rlgl.QUADS)
							rlgl.color4ub(0xFF, 0xFF, 0xFF, 0xFF)
							rlgl.texCoord2f(0.0, 1.0)
							rlgl.vertex3f(-width, height, -distance)
							rlgl.texCoord2f(0.0, 0.0)
							rlgl.vertex3f(-width, -height, -distance)
							rlgl.texCoord2f(1.0, 0.0)
							rlgl.vertex3f(width, -height, -distance)
							rlgl.texCoord2f(1.0, 1.0)
							rlgl.vertex3f(width, height, -distance)
						rlgl.ending()

						-- tracker
						gpu:useRenderTexture(RenderTexture.TRACKER)
						rlgl.begin(rlgl.QUADS)
							rlgl.color4ub(0xFF, 0xFF, 0xFF, 0xFF)
							rlgl.texCoord2f(0.0, 1.0)
							rlgl.vertex3f(distance, height, -width)
							rlgl.texCoord2f(0.0, 0.0)
							rlgl.vertex3f(distance, -height, -width)
							rlgl.texCoord2f(1.0, 0.0)
							rlgl.vertex3f(distance, -height, width)
							rlgl.texCoord2f(1.0, 1.0)
							rlgl.vertex3f(distance, height, width)
						rlgl.ending()

						-- model
						gpu:useRenderTexture(RenderTexture.MODEL)
						rlgl.begin(rlgl.QUADS)
							rlgl.color4ub(0xFF, 0xFF, 0xFF, 0xFF)
							rlgl.texCoord2f(0.0, 1.0)
							rlgl.vertex3f(width, height, distance)
							rlgl.texCoord2f(0.0, 0.0)
							rlgl.vertex3f(width, -height, distance)
							rlgl.texCoord2f(1.0, 0.0)
							rlgl.vertex3f(-width, -height, distance)
							rlgl.texCoord2f(1.0, 1.0)
							rlgl.vertex3f(-width, height, distance)
						rlgl.ending()

						-- texture
						gpu:useRenderTexture(RenderTexture.TEXTURE)
						rlgl.begin(rlgl.QUADS)
							rlgl.color4ub(0xFF, 0xFF, 0xFF, 0xFF)
							rlgl.texCoord2f(0.0, 1.0)
							rlgl.vertex3f(-distance, height, width)
							rlgl.texCoord2f(0.0, 0.0)
							rlgl.vertex3f(-distance, -height, width)
							rlgl.texCoord2f(1.0, 0.0)
							rlgl.vertex3f(-distance, -height, -width)
							rlgl.texCoord2f(1.0, 1.0)
							rlgl.vertex3f(-distance, height, -width)
						rlgl.ending()
					rlgl.popMatrix()

					gpu:camera2D(-1)
				else
					gpu:camera2D(-1)
					gpu:drawCurrentRenderTexture()
				end

				gpu:drawRect2D(0, 0, GPU_VSCREEN_W, 9, GPU_GRAY & 0xFFFFFFC0)
				gpu:print2D((GPU_VSCREEN_W /// 2) - ((#core.current_cart_name /// 2) * 6), 0, GPU_LGRAY, core.current_cart_name)

				if statemachine.dialog_id ~= DialogID.NONE then
					if core.log_state == LogState.HIDDEN then
						switch statemachine.dialog_id do
							case DialogID.IMAGE_CONFIG then
								gpu:print2D(GPU_VSCREEN_W - 12 * 6, 0, GPU_WHITE, "CONFIG IMAGE")
							case DialogID.SAMPLE_CONFIG then
								gpu:print2D(GPU_VSCREEN_W - 13 * 6, 0, GPU_WHITE, "CONFIG SAMPLE")
							case DialogID.MODEL_CONFIG then
								gpu:print2D(GPU_VSCREEN_W - 12 * 6, 0, GPU_WHITE, "CONFIG MODEL")
						end
					end
				else
					gpu:drawIcon2D(GPU_VSCREEN_W - 48, 0, (statemachine.state_id == StateID.CODE) and core.cursor_color or GPU_LGRAY, Icon.STATE_CODE)
					gpu:drawIcon2D(GPU_VSCREEN_W - 36, 0, (statemachine.state_id == StateID.TRACKER) and core.cursor_color or GPU_LGRAY, Icon.STATE_TRACKER)
					gpu:drawIcon2D(GPU_VSCREEN_W - 24, 0, (statemachine.state_id == StateID.MODEL) and core.cursor_color or GPU_LGRAY, Icon.STATE_MODEL)
					gpu:drawIcon2D(GPU_VSCREEN_W - 12, 0, (statemachine.state_id == StateID.TEXTURE) and core.cursor_color or GPU_LGRAY, Icon.STATE_TEXTURE)
				end
			end

			if core.log_state == LogState.SHOWN or core.animation_type == MenuAnimation.LOG_OPENCLOSE then
				local log_y: int32 = -LOG_H + (@int32)(core.log_offset * (@float32)(LOG_H))
				gpu:drawRect2D(0, log_y, GPU_VSCREEN_W, LOG_H + 1, GPU_BLACK & 0xFFFFFFE5)
				gpu:drawRect2D(0, log_y + LOG_H + 1, GPU_VSCREEN_W, 1, GPU_GRAY)

				core.log_draw_fn(log_y)
			end

			if core.popup_state ~= PopupState.HIDDEN then
				gpu:drawRect2D(0, GPU_VSCREEN_H - core.popup_offset, GPU_VSCREEN_W, 9, GPU_BLACK & 0xFFFFFFC0)
				gpu:print2D(6, GPU_VSCREEN_H - core.popup_offset, core.popup_color, core.popup_text)
			end

			if core.config.draw_fps then
				local color: uint32 = GPU_GREEN
				local fps: cint = rl.getFPS()

				if fps <= 10 then
					color = GPU_RED
				elseif fps <= 20 then
					color = GPU_YELLOW
				end
				
				local log_y: int32 = (core.log_state == LogState.SHOWN or core.animation_type == MenuAnimation.LOG_OPENCLOSE) and (-LOG_H + (@int32)(core.log_offset * (@float32)(LOG_H))) or -LOG_H - 2
				local fps_len: int32 = gpu:measureInt(fps)
				gpu:drawRect2D(0, log_y + LOG_H + 2, (fps_len + 4) * 6, 9, GPU_BLACK)
				gpu:printInt2D(0, log_y + LOG_H + 2, color, (@int32)(fps), nilptr)
				gpu:print2D(6 + fps_len * 6, log_y + LOG_H + 2, color, "FPS")
			end
		gpu:endRenderTexture()

		gpu:resetMatrixStack()

		-- render master render texture to the screen
		rl.beginDrawing()
			gpu:clearColor(GPU_BLACK)
			gpu:clear(GPU_CLEAR_ALL)

			rl.beginShaderMode(gpu.crt_shader)
				gpu:drawMasterRenderTexture()
			rl.endShaderMode()
		rl.endDrawing()
		
		if core.queued_log_state ~= LogState.NONE then
			if (core.log_state == LogState.HIDDEN and core.queued_log_state == LogState.SHOWN) or (core.log_state == LogState.SHOWN and core.queued_log_state == LogState.HIDDEN) then
				core.animation_type = MenuAnimation.LOG_OPENCLOSE
				core.anim_time = 0.0
				core.anim_beginning = core.log_offset
				
				if core.queued_log_state == LogState.HIDDEN then
					core.anim_target = 0.0
				else
					core.anim_target = 1.0
				end
			end

			core.log_state = core.queued_log_state
			core.queued_log_state = LogState.NONE
		end

		statemachine:update()
	end

	-- save any memcard data and cleanup
	if vm.memcard_id ~= "" then
		vm:saveMemCard()
	end

	statemachine:cleanup()
	soundchip:cleanup()
	gpu:cleanup()
end

init()
run()
